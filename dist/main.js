/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/game_files/card.js":
/*!********************************!*\
  !*** ./src/game_files/card.js ***!
  \********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nconst Util = __webpack_require__(/*! ./util */ \"./src/game_files/util.js\");\nclass Card {\n  constructor(object) {\n    //#2-14\n    this.value = object.value;\n    // Suit needs to match the card save: Clubs, Diamond, Hearts, Spades\n    this.suit = object.suit;\n    // Code this in once ready to draw\n    this.sprite = new Image();\n    this.sprite.src = \"images/Cards/Medium/\" + this.suit + this.value + \".png\";\n    // console.log(this.sprite.src,\"Card Src\");\n    this.selected = false;\n    //Might need to know what trick we are inside, for event handling\n    this.trickid = 0;\n    this.pos = [0, 0];\n    this.points = [];\n  }\n  animate(ctx, spot) {\n    ctx.drawImage(this.sprite, spot[0], spot[1], Card.CARDWIDTH, Card.CARDHEIGHT);\n    if (this.selected) {\n      ctx.lineWidth = 3;\n      ;\n      ctx.strokeStyle = \"#FFFF00\";\n      ctx.strokeRect(spot[0], spot[1], Card.CARDWIDTH, Card.CARDHEIGHT);\n    }\n    this.sprite.onload = () => {\n      ctx.drawImage(this.sprite, spot[0], spot[1], Card.CARDWIDTH, Card.CARDHEIGHT);\n      if (this.selected) {\n        ctx.lineWidth = 3;\n        ctx.strokeStyle = \"#FFFF00\";\n        ctx.strokeRect(spot[0], spot[1], Card.CARDWIDTH, Card.CARDHEIGHT);\n      }\n    };\n  }\n  updatePoints(pos) {\n    this.pos = pos || this.pos;\n    this.points = [{\n      x: this.pos[0],\n      y: this.pos[1]\n    }, {\n      x: this.pos[0] + Card.CARDWIDTH,\n      y: this.pos[1]\n    }, {\n      x: this.pos[0] + Card.CARDWIDTH,\n      y: this.pos[1] + Card.CARDHEIGHT\n    }, {\n      x: this.pos[0],\n      y: this.pos[1] + Card.CARDHEIGHT\n    }];\n  }\n}\n_defineProperty(Card, \"CARDDIMENSIONS\", [[41, 60], [55, 80], [69, 100]]);\n_defineProperty(Card, \"canvasSize\", Util.canvasSize().size);\n_defineProperty(Card, \"CARDWIDTH\", Card.canvasSize === \"Large\" ? Card.CARDDIMENSIONS[2][0] : Card.canvasSize === \"Medium\" ? Card.CARDDIMENSIONS[1][0] : Card.CARDDIMENSIONS[0][0]);\n_defineProperty(Card, \"CARDHEIGHT\", Card.canvasSize === \"Large\" ? Card.CARDDIMENSIONS[2][1] : Card.canvasSize === \"Medium\" ? Card.CARDDIMENSIONS[1][1] : Card.CARDDIMENSIONS[0][1]);\nmodule.exports = Card;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFDLENBQUMsQ0FBQyxDQUFDLEdBUHpCNUIsSUFBSSxDQU82QjRCLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFxRDNEQyxNQUFNLENBQUNDLE9BQU8sR0FBRzlCLElBQUkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYXJuaXZhbHBva2VyLy4vc3JjL2dhbWVfZmlsZXMvY2FyZC5qcz8yZjEyIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFV0aWwgPSByZXF1aXJlKFwiLi91dGlsXCIpXHJcblxyXG5jbGFzcyBDYXJkIHtcclxuICAgIHN0YXRpYyBDQVJERElNRU5TSU9OUyA9IFtbNDEsNjBdLFs1NSw4MF0sWzY5LDEwMF1dXHJcbiAgICBcclxuICAgIHN0YXRpYyBjYW52YXNTaXplID0gVXRpbC5jYW52YXNTaXplKCkuc2l6ZTtcclxuICAgIHN0YXRpYyBDQVJEV0lEVEggPSB0aGlzLmNhbnZhc1NpemUgPT09IFwiTGFyZ2VcIiA/IHRoaXMuQ0FSRERJTUVOU0lPTlNbMl1bMF0gOiB0aGlzLmNhbnZhc1NpemUgPT09IFwiTWVkaXVtXCIgXHJcbiAgICAgICAgPyB0aGlzLkNBUkRESU1FTlNJT05TWzFdWzBdIDogdGhpcy5DQVJERElNRU5TSU9OU1swXVswXTtcclxuICAgIHN0YXRpYyBDQVJESEVJR0hUID0gdGhpcy5jYW52YXNTaXplID09PSBcIkxhcmdlXCIgPyB0aGlzLkNBUkRESU1FTlNJT05TWzJdWzFdIDogdGhpcy5jYW52YXNTaXplID09PSBcIk1lZGl1bVwiIFxyXG4gICAgPyB0aGlzLkNBUkRESU1FTlNJT05TWzFdWzFdIDogdGhpcy5DQVJERElNRU5TSU9OU1swXVsxXTtcclxuICAgIGNvbnN0cnVjdG9yKG9iamVjdCkge1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIzItMTRcclxuICAgICAgICB0aGlzLnZhbHVlID0gb2JqZWN0LnZhbHVlO1xyXG4gICAgICAgIC8vIFN1aXQgbmVlZHMgdG8gbWF0Y2ggdGhlIGNhcmQgc2F2ZTogQ2x1YnMsIERpYW1vbmQsIEhlYXJ0cywgU3BhZGVzXHJcbiAgICAgICAgdGhpcy5zdWl0ID0gb2JqZWN0LnN1aXQ7XHJcbiAgICAgICAgLy8gQ29kZSB0aGlzIGluIG9uY2UgcmVhZHkgdG8gZHJhd1xyXG4gICAgICAgIHRoaXMuc3ByaXRlID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgdGhpcy5zcHJpdGUuc3JjID0gXCJpbWFnZXMvQ2FyZHMvTWVkaXVtL1wiK3RoaXMuc3VpdCt0aGlzLnZhbHVlK1wiLnBuZ1wiO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMuc3ByaXRlLnNyYyxcIkNhcmQgU3JjXCIpO1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWQgPSBmYWxzZTtcclxuICAgICAgICAvL01pZ2h0IG5lZWQgdG8ga25vdyB3aGF0IHRyaWNrIHdlIGFyZSBpbnNpZGUsIGZvciBldmVudCBoYW5kbGluZ1xyXG4gICAgICAgIHRoaXMudHJpY2tpZCA9IDA7XHJcbiAgICAgICAgdGhpcy5wb3MgPSBbMCwwXTtcclxuICAgICAgICB0aGlzLnBvaW50cyA9W107XHJcbiAgICB9XHJcbiAgICBhbmltYXRlKGN0eCxzcG90KXtcclxuICAgICAgICBjdHguZHJhd0ltYWdlKHRoaXMuc3ByaXRlLHNwb3RbMF0sc3BvdFsxXSxDYXJkLkNBUkRXSURUSCxDYXJkLkNBUkRIRUlHSFQpXHJcbiAgICAgICAgaWYodGhpcy5zZWxlY3RlZCl7XHJcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IDM7O1xyXG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IFwiI0ZGRkYwMFwiO1xyXG4gICAgICAgIGN0eC5zdHJva2VSZWN0KHNwb3RbMF0sc3BvdFsxXSxDYXJkLkNBUkRXSURUSCxDYXJkLkNBUkRIRUlHSFQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNwcml0ZS5vbmxvYWQgPSAoKT0+IHsgICBcclxuICAgICAgICAgICAgY3R4LmRyYXdJbWFnZSh0aGlzLnNwcml0ZSxzcG90WzBdLHNwb3RbMV0sQ2FyZC5DQVJEV0lEVEgsQ2FyZC5DQVJESEVJR0hUKTtcclxuICAgICAgICAgICAgaWYodGhpcy5zZWxlY3RlZCl7XHJcbiAgICAgICAgICAgICAgICBjdHgubGluZVdpZHRoID0gMztcclxuICAgICAgICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IFwiI0ZGRkYwMFwiO1xyXG4gICAgICAgICAgICAgICAgY3R4LnN0cm9rZVJlY3Qoc3BvdFswXSxzcG90WzFdLENhcmQuQ0FSRFdJRFRILENhcmQuQ0FSREhFSUdIVCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgIH1cclxuICAgIHVwZGF0ZVBvaW50cyhwb3Mpe1xyXG4gICAgICAgIHRoaXMucG9zID0gcG9zIHx8IHRoaXMucG9zO1xyXG4gICAgICAgIHRoaXMucG9pbnRzID1be1xyXG4gICAgICAgICAgICB4OiB0aGlzLnBvc1swXSxcclxuICAgICAgICAgICAgeTogdGhpcy5wb3NbMV1cclxuICAgICAgICB9LHtcclxuICAgICAgICAgICAgeDogdGhpcy5wb3NbMF0rQ2FyZC5DQVJEV0lEVEgsXHJcbiAgICAgICAgICAgIHk6IHRoaXMucG9zWzFdXHJcbiAgICAgICAgfSx7XHJcbiAgICAgICAgICAgIHg6IHRoaXMucG9zWzBdK0NhcmQuQ0FSRFdJRFRILFxyXG4gICAgICAgICAgICB5OiB0aGlzLnBvc1sxXStDYXJkLkNBUkRIRUlHSFRcclxuICAgICAgICB9LHtcclxuICAgICAgICAgICAgeDogdGhpcy5wb3NbMF0sXHJcbiAgICAgICAgICAgIHk6IHRoaXMucG9zWzFdK0NhcmQuQ0FSREhFSUdIVFxyXG4gICAgICAgIH1cclxuICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gQ2FyZDsgIl0sIm5hbWVzIjpbIlV0aWwiLCJyZXF1aXJlIiwiQ2FyZCIsImNvbnN0cnVjdG9yIiwib2JqZWN0IiwidmFsdWUiLCJzdWl0Iiwic3ByaXRlIiwiSW1hZ2UiLCJzcmMiLCJzZWxlY3RlZCIsInRyaWNraWQiLCJwb3MiLCJwb2ludHMiLCJhbmltYXRlIiwiY3R4Iiwic3BvdCIsImRyYXdJbWFnZSIsIkNBUkRXSURUSCIsIkNBUkRIRUlHSFQiLCJsaW5lV2lkdGgiLCJzdHJva2VTdHlsZSIsInN0cm9rZVJlY3QiLCJvbmxvYWQiLCJ1cGRhdGVQb2ludHMiLCJ4IiwieSIsIl9kZWZpbmVQcm9wZXJ0eSIsImNhbnZhc1NpemUiLCJzaXplIiwiQ0FSRERJTUVOU0lPTlMiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/game_files/card.js\n");

/***/ }),

/***/ "./src/game_files/dealer.js":
/*!**********************************!*\
  !*** ./src/game_files/dealer.js ***!
  \**********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("const Trick = __webpack_require__(/*! ./trick */ \"./src/game_files/trick.js\");\nconst Player = __webpack_require__(/*! ./player */ \"./src/game_files/player.js\");\nconst Util = __webpack_require__(/*! ./util */ \"./src/game_files/util.js\");\nclass Dealer extends Player {\n  constructor(object) {\n    super(object);\n    this.dealerCards = [];\n    this.handTracker = {\n      result: []\n    };\n    this.makeTricks();\n  }\n  addCardBoard(card) {\n    for (let i = 0; i < this.tricks.length; i++) {\n      if (this.tricks[i].active && this.tricks[i].addCard(card)) {\n        break;\n      } else if (!this.tricks[i].active) {\n        this.activateNextTrick();\n        this.addCardBoard(card);\n        break;\n      }\n    }\n    this.dealerPlayCycle();\n    return true;\n  }\n  makeTricks() {\n    let trickArray = [];\n    let trick1 = new Trick({\n      pos: [this.pos[0], this.pos[1] + Trick.HEIGHT],\n      color: \"#FFA500\",\n      trickid: 5,\n      active: true\n    });\n    trickArray.push(trick1);\n    let trick2 = new Trick({\n      pos: [this.pos[0] + Trick.WIDTH, this.pos[1] + Trick.HEIGHT],\n      color: \"#00CC33\",\n      trickid: 6,\n      active: true\n    });\n    trickArray.push(trick2);\n    let trick3 = new Trick({\n      pos: this.pos,\n      color: \"#800080\",\n      trickid: 7,\n      active: false\n    });\n    trickArray.push(trick3);\n    let trick4 = new Trick({\n      pos: [this.pos[0] + Trick.WIDTH, this.pos[1]],\n      color: \"#0099FF\",\n      trickid: 8,\n      active: false\n    });\n    trickArray.push(trick4);\n    this.tricks = trickArray;\n  }\n  updateDealerCards() {\n    let newDealerCards = [];\n    this.tricks.forEach(trick => {\n      let array = [...trick.cards];\n      newDealerCards = [...newDealerCards, ...array];\n    });\n    this.dealerCards = newDealerCards;\n  }\n  updateCardTracker() {\n    let cards = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.dealerCards;\n    let object = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.handTracker;\n    object.cards = cards;\n    let values = [...Array(15).keys()].splice(2, 15);\n    values.forEach(value => {\n      object[value] = [];\n    });\n    let suits = [\"Clubs\", \"Hearts\", \"Diamond\", \"Spades\"];\n    suits.forEach(suit => {\n      object[suit] = [];\n    });\n    cards.forEach(card => {\n      let suit = card.suit;\n      let val = card.value;\n      object[suit].push(card);\n      object[val].push(card);\n    });\n  }\n  updateBestHand() {\n    let object = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.handTracker;\n    this.updateCardTracker(object.cards, object);\n    if (object.cards.length <= 5) {\n      object.result.push(object.cards);\n      return object;\n    }\n    let flushCheck = [];\n    let straightCheck = [];\n    let fourKind = [];\n    let threeKind = [];\n    let twoKind = [];\n    // Check for flush\n    let suits = [\"Clubs\", \"Hearts\", \"Diamond\", \"Spades\"];\n    suits.forEach(suit => {\n      if (object[suit].length > 4) {\n        flushCheck = object[suit];\n      }\n    });\n\n    // Check for straight\n    let values = [...Array(15).keys()].splice(2, 15);\n    let chain = [];\n    values.forEach(value => {\n      if (object[value].length >= 4) {\n        fourKind.push(object[value]);\n      } else if (object[value].length === 3) {\n        threeKind.push(object[value]);\n      } else if (object[value].length === 2) {\n        twoKind.push(object[value]);\n      }\n      if (object[value][0]) {\n        chain.push(object[value][0]);\n        if (chain.length === 5) {\n          straightCheck = chain;\n        }\n      } else {\n        chain = [];\n      }\n    });\n    //\n    const cleanUpResult = () => {\n      let copyObject = {\n        ...object\n      };\n      object.result.forEach(trick => {\n        trick.forEach(card => {\n          object.cards.forEach((card2, idx) => {\n            if (card.suit === card2.suit && card.value === card2.value) {\n              object.cards = object.cards.slice(0, idx).concat(object.cards.slice(idx + 1));\n            }\n          });\n        });\n      });\n      return this.updateBestHand(object);\n    };\n    //Build Straight Flush\n    // if(flushCheck.length !== 0 && straightCheck.length !== 0){\n    //     let straightCards = straightCheck.filter((card)=>{\n    //         card.suit === flushCheck[0].suit;\n    //     })\n    //     let result = [];\n    //     for(let i = 0; i < 5; i++){\n    //         result.push(straightCards[i]);\n    //     }\n    //     object.result.push(result);\n    //     console.log(\"Found Straight Flush\")\n    //     return cleanUpResult();\n    // }\n    //Build Four of a Kind\n    if (fourKind.length) {\n      let result = [];\n      for (let i = 0; i < 4; i++) {\n        result.push(fourKind[0][i]);\n      }\n      object.result.push(result);\n      return cleanUpResult();\n    }\n    //Build Full House\n    if (threeKind.length && twoKind.length) {\n      let result = [];\n      for (let i = 0; i < 3; i++) {\n        result.push(threeKind[0][i]);\n        if (i !== 2) {\n          result.push(twoKind[0][i]);\n        }\n      }\n      object.result.push(result);\n      return cleanUpResult();\n    }\n    //Build Flush\n    if (flushCheck.length) {\n      let result = [];\n      for (let i = 0; i < 5; i++) {\n        result.push(flushCheck[i]);\n      }\n      object.result.push(result);\n      return cleanUpResult();\n    }\n    // Build Straight\n    if (straightCheck.length) {\n      let result = [];\n      for (let i = 0; i < 5; i++) {\n        result.push(straightCheck[i]);\n      }\n      object.result.push(result);\n      return cleanUpResult();\n    }\n    // Build three of a Kind\n    if (threeKind.length) {\n      let result = [];\n      for (let i = 0; i < 3; i++) {\n        result.push(threeKind[0][i]);\n      }\n      object.result.push(result);\n      return cleanUpResult();\n    }\n    // Build two of a Kind\n    if (twoKind.length) {\n      if (twoKind.length > 1) {\n        let result = [];\n        for (let i = 0; i < 2; i++) {\n          result.push(twoKind[0][i]);\n          result.push(twoKind[1][i]);\n        }\n        object.result.push(result);\n        return cleanUpResult();\n      }\n      let result = [];\n      for (let i = 0; i < 2; i++) {\n        result.push(twoKind[0][i]);\n      }\n      object.result.push(result);\n      return cleanUpResult();\n    }\n    let result = [];\n    for (let i = 0; i < 5; i++) {\n      result.push(object.cards[i]);\n    }\n    object.result.push(result);\n    return cleanUpResult();\n  }\n  dealerPlayCycle() {\n    this.updateDealerCards();\n    this.updateCardTracker();\n    if (this.dealerCards.length >= 5) {\n      this.handTracker.result = [];\n      this.updateBestHand();\n    }\n    ;\n    if (this.activeTricks === this.handTracker.result.length) {\n      //Easy Case\n      this.handTracker.result.forEach((newTrick, idx) => {\n        this.tricks[idx].cards = [];\n        newTrick.forEach(card => {\n          this.tricks[idx].addCard(card);\n        });\n      });\n    } else {\n      if (this.handTracker.result.length > this.activeTricks) {\n        let flatResult = this.handTracker.result.flat();\n        for (let i = 0; i < this.activeTricks; i++) {\n          this.tricks[i].cards = [];\n          while (this.tricks[i].cards.length < 5 && flatResult.length > 0) {\n            this.tricks[i].addCard(flatResult.shift());\n          }\n        }\n      }\n    }\n  }\n  sumScores(scores) {\n    let score = 0;\n    scores.forEach(num => {\n      score += num;\n    });\n    return score;\n  }\n  newTrickSet() {\n    let trickArray = [];\n    let tempPos = this.pos;\n    let trick1 = new Trick({\n      pos: this.pos,\n      trickid: 1\n    });\n    trickArray.push(trick1);\n    let trick2 = new Trick({\n      pos: [this.pos[0] + 400, this.pos[1]],\n      color: \"#00FF00\",\n      trickid: 2\n    });\n    trickArray.push(trick2);\n    let trick3 = new Trick({\n      pos: [this.pos[0], this.pos[1] + 150],\n      color: \"#FF0000\",\n      trickid: 3,\n      active: false\n    });\n    trickArray.push(trick3);\n    let trick4 = new Trick({\n      pos: [this.pos[0] + 400, this.pos[1] + 150],\n      color: \"#0000FF\",\n      trickid: 4,\n      active: false\n    });\n    trickArray.push(trick4);\n    return trickArray;\n  }\n  nextDealerCard() {}\n}\nmodule.exports = Dealer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/game_files/dealer.js\n");

/***/ }),

/***/ "./src/game_files/deck.js":
/*!********************************!*\
  !*** ./src/game_files/deck.js ***!
  \********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("const Card = __webpack_require__(/*! ./card */ \"./src/game_files/card.js\");\nclass Deck {\n  constructor() {\n    this.cards = [];\n    this.makeCards();\n  }\n  makeCards() {\n    let allCards = [];\n    let values = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\n    let suits = [\"Clubs\", \"Hearts\", \"Diamond\", \"Spades\"];\n    for (let i = 0; i < values.length; i++) {\n      for (let j = 0; j < suits.length; j++) {\n        let cardObject = {\n          suit: suits[j],\n          value: values[i]\n        };\n        let card = new Card(cardObject);\n        allCards.push(card);\n      }\n    }\n    this.cards = allCards;\n    return true;\n  }\n  drawCard() {\n    const scaler = this.cards.length;\n    const random = Math.random();\n    const pick = Math.floor(scaler * random);\n    const chosen = this.cards[pick];\n    return this.cards.splice(this.cards.indexOf(chosen), 1)[0];\n  }\n}\n\n// let deck = new Deck();\n// console.log(deck.cards.length);\n// console.log(deck.drawCard());\n// console.log(deck.cards.length);\nmodule.exports = Deck;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvZ2FtZV9maWxlcy9kZWNrLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLElBQUksR0FBR0MsbUJBQU8sQ0FBQyx3Q0FBUSxDQUFDO0FBRTlCLE1BQU1DLElBQUksQ0FBQztFQUVIQyxXQUFXQSxDQUFBLEVBQUU7SUFDVCxJQUFJLENBQUNDLEtBQUssR0FBRyxFQUFFO0lBQ2YsSUFBSSxDQUFDQyxTQUFTLEVBQUU7RUFDcEI7RUFFSkEsU0FBU0EsQ0FBQSxFQUFHO0lBQ1IsSUFBSUMsUUFBUSxHQUFHLEVBQUU7SUFDakIsSUFBSUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxDQUFDO0lBQzdDLElBQUlDLEtBQUssR0FBRyxDQUFDLE9BQU8sRUFBQyxRQUFRLEVBQUMsU0FBUyxFQUFDLFFBQVEsQ0FBQztJQUVqRCxLQUFJLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUNBLENBQUMsR0FBR0YsTUFBTSxDQUFDRyxNQUFNLEVBQUVELENBQUMsRUFBRSxFQUFDO01BQ2pDLEtBQUksSUFBSUUsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHSCxLQUFLLENBQUNFLE1BQU0sRUFBRUMsQ0FBQyxFQUFFLEVBQUM7UUFDakMsSUFBSUMsVUFBVSxHQUFHO1VBQ2JDLElBQUksRUFBRUwsS0FBSyxDQUFDRyxDQUFDLENBQUM7VUFDZEcsS0FBSyxFQUFFUCxNQUFNLENBQUNFLENBQUM7UUFDbkIsQ0FBQztRQUNELElBQUlNLElBQUksR0FBRyxJQUFJZixJQUFJLENBQUNZLFVBQVUsQ0FBQztRQUMvQk4sUUFBUSxDQUFDVSxJQUFJLENBQUNELElBQUksQ0FBQztNQUN2QjtJQUNKO0lBQ0EsSUFBSSxDQUFDWCxLQUFLLEdBQUdFLFFBQVE7SUFDckIsT0FBTyxJQUFJO0VBQ2Y7RUFFQVcsUUFBUUEsQ0FBQSxFQUFHO0lBQ1AsTUFBTUMsTUFBTSxHQUFHLElBQUksQ0FBQ2QsS0FBSyxDQUFDTSxNQUFNO0lBQ2hDLE1BQU1TLE1BQU0sR0FBR0MsSUFBSSxDQUFDRCxNQUFNLEVBQUU7SUFDNUIsTUFBTUUsSUFBSSxHQUFHRCxJQUFJLENBQUNFLEtBQUssQ0FBQ0osTUFBTSxHQUFHQyxNQUFNLENBQUM7SUFDeEMsTUFBTUksTUFBTSxHQUFHLElBQUksQ0FBQ25CLEtBQUssQ0FBQ2lCLElBQUksQ0FBQztJQUMvQixPQUFPLElBQUksQ0FBQ2pCLEtBQUssQ0FBQ29CLE1BQU0sQ0FBQyxJQUFJLENBQUNwQixLQUFLLENBQUNxQixPQUFPLENBQUNGLE1BQU0sQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUM3RDtBQUNKOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FHLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHekIsSUFBSSIsInNvdXJjZXMiOlsid2VicGFjazovL2Nhcm5pdmFscG9rZXIvLi9zcmMvZ2FtZV9maWxlcy9kZWNrLmpzPzc5NmEiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQ2FyZCA9IHJlcXVpcmUoXCIuL2NhcmRcIilcclxuXHJcbmNsYXNzIERlY2sge1xyXG5cclxuICAgICAgICBjb25zdHJ1Y3Rvcigpe1xyXG4gICAgICAgICAgICB0aGlzLmNhcmRzID0gW107XHJcbiAgICAgICAgICAgIHRoaXMubWFrZUNhcmRzKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIG1ha2VDYXJkcygpIHtcclxuICAgICAgICBsZXQgYWxsQ2FyZHMgPSBbXTtcclxuICAgICAgICBsZXQgdmFsdWVzID0gWzIsMyw0LDUsNiw3LDgsOSwxMCwxMSwxMiwxMywxNF07XHJcbiAgICAgICAgbGV0IHN1aXRzID0gW1wiQ2x1YnNcIixcIkhlYXJ0c1wiLFwiRGlhbW9uZFwiLFwiU3BhZGVzXCJdO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGZvcihsZXQgaSA9IDA7aSA8IHZhbHVlcy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgIGZvcihsZXQgaiA9IDA7IGogPCBzdWl0cy5sZW5ndGg7IGorKyl7XHJcbiAgICAgICAgICAgICAgICBsZXQgY2FyZE9iamVjdCA9IHtcclxuICAgICAgICAgICAgICAgICAgICBzdWl0OiBzdWl0c1tqXSxcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVzW2ldLFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbGV0IGNhcmQgPSBuZXcgQ2FyZChjYXJkT2JqZWN0KTtcclxuICAgICAgICAgICAgICAgIGFsbENhcmRzLnB1c2goY2FyZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jYXJkcyA9IGFsbENhcmRzO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGRyYXdDYXJkKCkge1xyXG4gICAgICAgIGNvbnN0IHNjYWxlciA9IHRoaXMuY2FyZHMubGVuZ3RoO1xyXG4gICAgICAgIGNvbnN0IHJhbmRvbSA9IE1hdGgucmFuZG9tKCk7XHJcbiAgICAgICAgY29uc3QgcGljayA9IE1hdGguZmxvb3Ioc2NhbGVyICogcmFuZG9tKTtcclxuICAgICAgICBjb25zdCBjaG9zZW4gPSB0aGlzLmNhcmRzW3BpY2tdO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNhcmRzLnNwbGljZSh0aGlzLmNhcmRzLmluZGV4T2YoY2hvc2VuKSwxKVswXTtcclxuICAgIH1cclxufVxyXG5cclxuLy8gbGV0IGRlY2sgPSBuZXcgRGVjaygpO1xyXG4vLyBjb25zb2xlLmxvZyhkZWNrLmNhcmRzLmxlbmd0aCk7XHJcbi8vIGNvbnNvbGUubG9nKGRlY2suZHJhd0NhcmQoKSk7XHJcbi8vIGNvbnNvbGUubG9nKGRlY2suY2FyZHMubGVuZ3RoKTtcclxubW9kdWxlLmV4cG9ydHMgPSBEZWNrOyJdLCJuYW1lcyI6WyJDYXJkIiwicmVxdWlyZSIsIkRlY2siLCJjb25zdHJ1Y3RvciIsImNhcmRzIiwibWFrZUNhcmRzIiwiYWxsQ2FyZHMiLCJ2YWx1ZXMiLCJzdWl0cyIsImkiLCJsZW5ndGgiLCJqIiwiY2FyZE9iamVjdCIsInN1aXQiLCJ2YWx1ZSIsImNhcmQiLCJwdXNoIiwiZHJhd0NhcmQiLCJzY2FsZXIiLCJyYW5kb20iLCJNYXRoIiwicGljayIsImZsb29yIiwiY2hvc2VuIiwic3BsaWNlIiwiaW5kZXhPZiIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/game_files/deck.js\n");

/***/ }),

/***/ "./src/game_files/game.js":
/*!********************************!*\
  !*** ./src/game_files/game.js ***!
  \********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nconst Player = __webpack_require__(/*! ./player */ \"./src/game_files/player.js\");\nconst Deck = __webpack_require__(/*! ./deck */ \"./src/game_files/deck.js\");\nconst Util = __webpack_require__(/*! ./util */ \"./src/game_files/util.js\");\nconst Dealer = __webpack_require__(/*! ./dealer */ \"./src/game_files/dealer.js\");\nclass Game {\n  //default is 1200,800\n  // 800 - 2*120 (Trick) = 560\n\n  constructor(canvasSize) {\n    this.dealer = new Dealer({\n      pos: [canvasSize[1] * 0.36, canvasSize[1] * 0.25],\n      name: \"Dealer\",\n      color: \"#FFA500\",\n      canvasSize: canvasSize\n    });\n    this.player = new Player({\n      pos: [canvasSize[1] * 0.36, canvasSize[1] * 0.7],\n      name: \"Player\",\n      color: \"#FFA500\",\n      canvasSize: canvasSize\n    });\n    this.deck = new Deck();\n    this.canvasSize = canvasSize;\n    this.round = 1;\n    this.prep_game();\n    this.scaler = 1;\n  }\n  calcScaler() {\n    if (this.canvasSize[0] === 900) {\n      return this.scaler = 0.75;\n    } else if (this.canvasSize[0] === 1500) {\n      return this.scaler = 1.25;\n    }\n  }\n  prep_game() {\n    for (let i = 0; i < Game.START_HAND; i++) {\n      this.drawPlayer();\n    }\n    for (let i = 0; i < Game.START_HAND; i++) {\n      this.drawDealer();\n    }\n  }\n  drawPlayer() {\n    let new_card = this.deck.drawCard();\n    this.player.addCardBoard(new_card);\n  }\n  drawDealer() {\n    let new_card = this.deck.drawCard();\n    this.dealer.addCardBoard(new_card);\n  }\n  nextRound() {\n    this.round += 1;\n    this.player.gold += 4;\n    this.compareBoards();\n    // console.log(this.player.score,\"player score\");\n    // console.log(this.dealer.score,\"dealer score\");\n  }\n\n  compareBoards() {\n    // Will need refactor to compare for each trick\n    // Loop based on whichever board has the most tricks\n    // Include auto win if mismatch on trick count\n\n    let dealer_scores = this.dealer.evaluateBoard();\n    // console.log(dealer_scores,\"Dealer Scores\")\n    let player_scores = this.player.evaluateBoard();\n    // console.log(player_scores,\"Player Scores\")\n    let min = dealer_scores.length < player_scores.length ? dealer_scores.length : player_scores.length;\n    // console.log(min,\"min\");\n    let playerroundscore = 0;\n    let dealerroundscore = 0;\n    for (let i = 0; i < min; i++) {\n      if (dealer_scores[i] > player_scores[i]) {\n        let scoreobj = document.getElementById(`score${i + 1}`);\n        scoreobj.innerText = 0;\n        dealerroundscore += 1;\n        // console.log(\"Dealer Wins 1\")\n      } else if (dealer_scores[i] < player_scores[i]) {\n        let scoreobj = document.getElementById(`score${i + 1}`);\n        scoreobj.innerText = 1;\n        playerroundscore += 1;\n        // console.log(\"Player Wins 1\")\n      } else if (dealer_scores[i] === player_scores[i]) {\n        // console.log(\"Tie\");\n        let scoreobj = document.getElementById(`score${i + 1}`);\n        scoreobj.innerText = \"\";\n      }\n    }\n    this.player.score += playerroundscore;\n    this.dealer.score += dealerroundscore;\n    // console.log([this.player.score,this.dealer.score],\"Score after round\");\n    let playerscorehtml = document.getElementById(`playerscore`);\n    let dealerscorehtml = document.getElementById(`dealerscore`);\n    playerscorehtml.innerText = `Round Score     ${playerroundscore}`;\n    dealerscorehtml.innerText = `Round Score     ${dealerroundscore}`;\n  }\n  animate(ctx) {\n    this.calcScaler();\n    ctx.font = `${40 * this.scaler}px Arial`;\n    ctx.fillStyle = \"#FFFFFF\";\n    ctx.clearRect(725 / 1200 * this.canvasSize[0], 0, 300, 150 / 800 * this.canvasSize[1]);\n    ctx.fillText(`Round: ${this.round}`, 725 / 1200 * this.canvasSize[0], 190 / 800 * this.canvasSize[1]);\n    ctx.onload = () => {\n      this.calcScaler();\n      ctx.clearRect(725 / 1200 * this.canvasSize[0], 0, 300, 150 / 800 * this.canvasSize[1]);\n      ctx.fillText(`Dealer Hands`, 725 / 1200 * this.canvasSize[0], 190 / 800 * this.canvasSize[1]);\n    };\n  }\n  resetBoard() {}\n  winner() {\n    let playerscore = this.player.score;\n    let dealerscore = this.dealer.score;\n    let result = [playerscore, dealerscore];\n    if (playerscore > dealerscore) {\n      result.push(\"Player Wins!\");\n    } else {\n      result.push(\"Dealer Wins!\");\n    }\n    return result;\n  }\n}\n// const g = new Game();\n// g.play();\n_defineProperty(Game, \"START_HAND\", 7);\n_defineProperty(Game, \"MAXROUNDS\", 11);\nmodule.exports = Game;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/game_files/game.js\n");

/***/ }),

/***/ "./src/game_files/player.js":
/*!**********************************!*\
  !*** ./src/game_files/player.js ***!
  \**********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nconst Card = __webpack_require__(/*! ./card */ \"./src/game_files/card.js\");\nconst Trick = __webpack_require__(/*! ./trick */ \"./src/game_files/trick.js\");\nconst Util = __webpack_require__(/*! ./util */ \"./src/game_files/util.js\");\nclass Player {\n  constructor(object) {\n    this.canvasSize = object.canvasSize;\n    this.DIM_X = this.pos = object.pos;\n    this.name = object.name;\n    this.score = 0;\n    this.gold = 0;\n    this.color = object.color;\n    //Probably want an array of trick pos.\n    //Probably want to prefill each board with 4 tricks, 3 of which are empty.\n    this.tricks = [];\n    this.activeTricks = 2;\n    this.makeTricks();\n    this.scaler = 1;\n    this.calcScaler();\n  }\n  calcScaler() {\n    if (this.canvasSize[0] === 900) {\n      return this.scaler = 0.75;\n    } else if (this.canvasSize[0] === 1500) {\n      return this.scaler = 1.25;\n    }\n  }\n  addCardBoard(card) {\n    for (let i = 0; i < this.tricks.length; i++) {\n      if (this.tricks[i].addCard(card)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  activateNextTrick() {\n    for (let i = 0; i < this.tricks.length; i++) {\n      let trick = this.tricks[i];\n      if (trick.active === false) {\n        trick.active = true;\n        this.activeTricks += 1;\n        break;\n      }\n    }\n  }\n  makeTricks() {\n    let trickArray = [];\n    let tempPos = this.pos;\n    let trick1 = new Trick({\n      pos: this.pos,\n      color: \"#FFA500\",\n      trickid: 1,\n      active: true\n    });\n    trickArray.push(trick1);\n    let trick2 = new Trick({\n      pos: [this.pos[0] + Trick.WIDTH, this.pos[1]],\n      color: \"#00CC33\",\n      trickid: 2,\n      active: true\n    });\n    trickArray.push(trick2);\n    let trick3 = new Trick({\n      pos: [this.pos[0], this.pos[1] + Trick.HEIGHT],\n      color: \"#800080\",\n      trickid: 3,\n      active: false\n    });\n    trickArray.push(trick3);\n    let trick4 = new Trick({\n      pos: [this.pos[0] + Trick.WIDTH, this.pos[1] + Trick.HEIGHT],\n      color: \"#0099FF\",\n      trickid: 4,\n      active: false\n    });\n    trickArray.push(trick4);\n    this.tricks = trickArray;\n  }\n  animate(ctx) {\n    // ctx.clearRect(0,0,900,200)\n    ctx.fillStyle = this.color;\n    this.tricks.forEach(trick => {\n      trick.animate(ctx, this.name);\n    });\n    this.animateGold(ctx);\n  }\n  evaluateBoard() {\n    let scores = [];\n    for (let i = 0; i < this.tricks.length; i++) {\n      let trick = this.tricks[i];\n      trick.evaluatePoker();\n      let value = trick.value || 0;\n      scores.push(value);\n    }\n    return scores;\n  }\n  animateGold(ctx) {\n    // Might move this to the game class\n    if (this.name === \"Player\") {\n      ctx.fillStyle = \"#003399\";\n      ctx.fillRect(980 / 1200 * this.canvasSize[0], 370 / 800 * this.canvasSize[1], 130 * this.scaler, 260 * this.scaler);\n      ctx.lineWidth = 3;\n      ctx.strokeStyle = \"#FFFFFF\";\n      ctx.strokeRect(980 / 1200 * this.canvasSize[0], 370 / 800 * this.canvasSize[1], 130 * this.scaler, 260 * this.scaler);\n      ctx.font = `${30 * this.scaler}px Arial`;\n      ctx.fillStyle = \"#FFFFFF\";\n      ctx.fillText(`Gold: ${this.gold}`, 995 / 1200 * this.canvasSize[0], 400 / 800 * this.canvasSize[1]);\n      // Button for new card\n      const cardback = new Image();\n      cardback.src = \"images/Cards/Medium/BackRed1.png\";\n      ctx.drawImage(cardback, 1020 / 1200 * this.canvasSize[0], 405 / 800 * this.canvasSize[1], Card.CARDWIDTH, Card.CARDHEIGHT);\n      ctx.font = `${20 * this.scaler}px Arial`;\n      ctx.fillStyle = \"#FFFFFF\";\n      ctx.fillText(`New Card`, 995 / 1200 * this.canvasSize[0], 507 / 800 * this.canvasSize[1]);\n      ctx.fillText(`2`, 1090 / 1200 * this.canvasSize[0], 507 / 800 * this.canvasSize[1]);\n      /// Five in a row for the new hand\n      ctx.drawImage(cardback, 995 / 1200 * this.canvasSize[0], 515 / 800 * this.canvasSize[1], Card.CARDWIDTH, Card.CARDHEIGHT);\n      ctx.drawImage(cardback, 1001 / 1200 * this.canvasSize[0], 515 / 800 * this.canvasSize[1], Card.CARDWIDTH, Card.CARDHEIGHT);\n      ctx.drawImage(cardback, 1007 / 1200 * this.canvasSize[0], 515 / 800 * this.canvasSize[1], Card.CARDWIDTH, Card.CARDHEIGHT);\n      ctx.drawImage(cardback, 1013 / 1200 * this.canvasSize[0], 515 / 800 * this.canvasSize[1], Card.CARDWIDTH, Card.CARDHEIGHT);\n      ctx.drawImage(cardback, 1019 / 1200 * this.canvasSize[0], 515 / 800 * this.canvasSize[1], Card.CARDWIDTH, Card.CARDHEIGHT);\n      ctx.font = `${20 * this.scaler}px Arial`;\n      ctx.fillStyle = \"#FFFFFF\";\n      ctx.fillText(`New Hand`, 995 / 1200 * this.canvasSize[0], 620 / 800 * this.canvasSize[1]);\n      ctx.fillText(`6`, 1092 / 1200 * this.canvasSize[0], 620 / 800 * this.canvasSize[1]);\n      //This is a box 1020 to 1100 or 80 by 80\n      //The points are [1020,100],[1100,100],[1020,180],[1100,180]\n      cardback.onload = () => {\n        ctx.drawImage(cardback, 1020 / 1200 * this.canvasSize[0], 405 / 800 * this.canvasSize[1], Card.CARDWIDTH, Card.CARDHEIGHT);\n        ctx.drawImage(cardback, 995 / 1200 * this.canvasSize[0], 515 / 800 * this.canvasSize[1], Card.CARDWIDTH, Card.CARDHEIGHT);\n        ctx.drawImage(cardback, 1001 / 1200 * this.canvasSize[0], 515 / 800 * this.canvasSize[1], Card.CARDWIDTH, Card.CARDHEIGHT);\n        ctx.drawImage(cardback, 1007 / 1200 * this.canvasSize[0], 515 / 800 * this.canvasSize[1], Card.CARDWIDTH, Card.CARDHEIGHT);\n        ctx.drawImage(cardback, 1013 / 1200 * this.canvasSize[0], 515 / 800 * this.canvasSize[1], Card.CARDWIDTH, Card.CARDHEIGHT);\n        ctx.drawImage(cardback, 1019 / 1200 * this.canvasSize[0], 515 / 800 * this.canvasSize[1], Card.CARDWIDTH, Card.CARDHEIGHT);\n      };\n    }\n  }\n}\n_defineProperty(Player, \"DIM_X\", Trick.WIDTH * 2);\n_defineProperty(Player, \"DIM_Y\", Trick.HEIGHT * 2);\nmodule.exports = Player;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/game_files/player.js\n");

/***/ }),

/***/ "./src/game_files/trick.js":
/*!*********************************!*\
  !*** ./src/game_files/trick.js ***!
  \*********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nconst Player = __webpack_require__(/*! ./player */ \"./src/game_files/player.js\");\nconst Card = __webpack_require__(/*! ./card */ \"./src/game_files/card.js\");\nconst Util = __webpack_require__(/*! ./util */ \"./src/game_files/util.js\");\nclass Trick {\n  constructor(object) {\n    this.pos = object.pos;\n    this.cards = [];\n    this.value = 0;\n    this.values = [];\n    this.trait = \"High Card\";\n    this.major = 0;\n    this.color = object.color;\n    this.trickid = object.trickid;\n    this.active = object.active;\n    this.points = [];\n    this.updatePoints();\n    this.scaler = 1;\n    this.calcScaler();\n  }\n  calcScaler() {\n    if (this.canvasSize === \"Small\") {\n      return this.scaler = 0.75;\n    } else if (this.canvasSize === \"Large\") {\n      return this.scaler = 1.25;\n    }\n  }\n  updatePoints(pos) {\n    this.pos = pos || this.pos;\n    this.points = [{\n      x: this.pos[0],\n      y: this.pos[1]\n    }, {\n      x: this.pos[0] + Trick.WIDTH,\n      y: this.pos[1]\n    }, {\n      x: this.pos[0] + Trick.WIDTH,\n      y: this.pos[1] + Trick.HEIGHT\n    }, {\n      x: this.pos[0],\n      y: this.pos[1] + Trick.HEIGHT\n    }];\n  }\n  evaluate() {\n    let sum = 0;\n    this.cards.forEach(card => {\n      sum += card.value;\n    });\n    return sum;\n  }\n  evaluatePoker() {\n    let sorted = Util.sortCards(this.cards);\n    this.cards = sorted;\n    this.value = 0;\n    this.major = 0;\n    let values = [];\n    this.trait = \"High Card\";\n    let traitList = [\"High Card\", \"One Pair\", \"Two Pair\", \"Three of a Kind\", \"Straight\", \"Flush\", \"Full House\", \"Four of a Kind\", \"Straight-Flush\"];\n    let suits = [\"Clubs\", \"Hearts\", \"Diamond\", \"Spades\"];\n    let base = 14;\n    for (let i = 0; i < this.cards.length; i++) {\n      values.push(this.cards[i].value);\n    }\n    this.values = values;\n    if (this.cards.length === 5) {\n      // Check flush\n      let flushCheck = false;\n      let straightCheck = true;\n      for (let i = 0; i < suits.length; i++) {\n        let suit = suits[i];\n        if (this.cards.every(card => card.suit === suit)) {\n          flushCheck = true;\n        }\n      }\n      // Check straight\n      for (let i = 0; i < values.length - 1; i++) {\n        if (values[i] !== values[i + 1] + 1) {\n          // console.log(values,\"straigh check\");\n          // console.log([values[i],values[i+1]],\"straight check\");\n          straightCheck = false;\n        }\n      }\n      if (flushCheck && straightCheck) {\n        this.trait = \"Straight-Flush\";\n      } else if (flushCheck) {\n        this.trait = \"Flush\";\n      } else if (straightCheck) {\n        this.trait = \"Straight\";\n      }\n    }\n    let hash = {};\n    for (let i = 0; i < values.length; i++) {\n      if (hash[values[i]] === undefined) {\n        hash[values[i]] = 1;\n      } else {\n        hash[values[i]] += 1;\n      }\n    }\n    let pair = false;\n    let trips = false;\n    for (let i = 0; i < values.length; i++) {\n      if (hash[values[i]] === 4) {\n        this.trait = \"Four of a Kind\";\n        this.major = values[i];\n      }\n      if (hash[values[i]] === 2 && pair === false) {\n        pair = true;\n        this.trait = \"One Pair\";\n        this.major = values[i];\n      } else if (hash[values[i]] === 2 && pair === true && values[i] !== values[i - 1]) {\n        this.trait = \"Two Pair\";\n        this.major = values[i] > this.major ? values[i] : this.major;\n      } else if (hash[values[i]] === 3) {\n        trips = true;\n        this.trait = \"Three of a Kind\";\n        this.major = values[i];\n      }\n    }\n    if (trips && pair) {\n      this.trait = \"Full House\";\n    }\n    this.major = this.major || values[0];\n    let rank = traitList.indexOf(this.trait) + 1;\n    let tiebreaks = values.filter(num => num !== this.major);\n    let majorSum = this.major * base ** rank * 2;\n    let tiebreakSum = 0;\n    for (let i = 1; i < tiebreaks.length + 1; i++) {\n      tiebreakSum += tiebreaks[i - 1] * base ** rank / base ** i;\n    }\n    this.value = majorSum + tiebreakSum;\n    return this.value;\n  }\n  removeCard(card) {\n    let index = this.cards.indexOf(card);\n    return this.cards.splice(index, 1)[0];\n  }\n  addCard(card) {\n    // Need to refactor this to check if the trick has 5 cards\n    let count = this.cards.length;\n    if (count < Trick.MAXCARDS && this.active) {\n      let pos = this.pos;\n      pos = [pos[0] + Trick.XBUFFER, pos[1] + Trick.YBUFFER];\n      let xshift = count * Card.CARDWIDTH + count * 3;\n      pos = [pos[0] + xshift, pos[1]];\n      card.pos = pos;\n      card.trickid = this.trickid;\n      card.updatePoints();\n      this.cards.push(card);\n      return true;\n    } else {\n      return false;\n    }\n  }\n  updateCards() {\n    let count = this.cards.length;\n    for (let i = 0; i < count; i++) {\n      let card = this.cards[i];\n      let pos = this.pos;\n      pos = [pos[0] + Trick.XBUFFER, pos[1] + Trick.YBUFFER];\n      let xshift = i * Card.CARDWIDTH + i * 3;\n      pos = [pos[0] + xshift, pos[1]];\n      card.pos = pos;\n      card.updatePoints();\n    }\n  }\n  animate(ctx, name) {\n    let fontArray = [16, 22, 30];\n    const fontSize = Trick.canvasSize === \"Small\" ? fontArray[0] : Trick.canvasSize === \"Large\" ? fontArray[2] : fontArray[1];\n    if (this.active) {\n      const trickobj = document.getElementById(`trick${this.trickid}`);\n      trickobj.style.display = \"flex\";\n      trickobj.style.backgroundColor = this.color;\n      let sorted = Util.sortCards(this.cards);\n      this.cards = sorted;\n      this.updateCards();\n      this.evaluatePoker();\n      ctx.fillStyle = this.color;\n      let trickX = this.pos[0];\n      let trickY = this.pos[1];\n      ctx.fillRect(trickX, trickY, Trick.WIDTH, Trick.HEIGHT);\n      ctx.fillStyle = \"#FFFFFF\";\n      ctx.font = `${fontSize}px Arial`;\n      ctx.fillText(`${this.trait}`, trickX + Trick.WIDTH * 0.33, trickY + Trick.HEIGHT * 0.95);\n      for (let i = 0; i < this.cards.length; i++) {\n        let currentCard = this.cards[i];\n        currentCard.animate(ctx, currentCard.pos);\n        let cardobj = document.getElementById(`${this.trickid}-${i}`);\n        cardobj.src = currentCard.sprite.src;\n      }\n      ctx.lineWidth = 3;\n      ctx.strokeStyle = \"#FFFFFF\";\n      ctx.strokeRect(this.pos[0], this.pos[1], Trick.WIDTH, Trick.HEIGHT);\n    } else {\n      ctx.fillStyle = this.color;\n      let trickX = this.pos[0];\n      let trickY = this.pos[1];\n      ctx.fillRect(trickX, trickY, Trick.WIDTH, Trick.HEIGHT);\n      ctx.fillStyle = \"#FFFFFF\";\n      ctx.font = `${fontSize}px Arial`;\n      if (name === \"Player\") {\n        ctx.fillText(`Unlock Hand: 6 Gold!`, trickX + Trick.WIDTH * 0.2 * this.scaler, trickY + Trick.HEIGHT * 0.5);\n      } else {\n        ctx.fillStyle = \"#FFFFFF\";\n        ctx.fillText(`Inactive Hand`, trickX + Trick.WIDTH * 0.3 * this.scaler, trickY + Trick.HEIGHT * 0.5);\n      }\n      ctx.lineWidth = 3;\n      ctx.strokeStyle = \"#FFFFFF\";\n      ctx.strokeRect(this.pos[0], this.pos[1], Trick.WIDTH, Trick.HEIGHT);\n    }\n  }\n}\n\n// let t = new Trick({pos: [0,0]});\n// t.addCard(\"A\");\n// console.log(t,\"t\");\n_defineProperty(Trick, \"TRICKDIMENSIONS\", [[233, 90], [310, 120], [388, 150]]);\n_defineProperty(Trick, \"canvasSize\", Util.canvasSize().size);\n_defineProperty(Trick, \"WIDTH\", Trick.canvasSize === \"Large\" ? Trick.TRICKDIMENSIONS[2][0] : Trick.canvasSize === \"Medium\" ? Trick.TRICKDIMENSIONS[1][0] : Trick.TRICKDIMENSIONS[0][0]);\n_defineProperty(Trick, \"HEIGHT\", Trick.canvasSize === \"Large\" ? Trick.TRICKDIMENSIONS[2][1] : Trick.canvasSize === \"Medium\" ? Trick.TRICKDIMENSIONS[1][1] : Trick.TRICKDIMENSIONS[0][1]);\n_defineProperty(Trick, \"YBUFFER\", Trick.HEIGHT * 0.09);\n_defineProperty(Trick, \"XBUFFER\", Trick.HEIGHT * 0.09);\n_defineProperty(Trick, \"MAXCARDS\", 5);\nmodule.exports = Trick;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/game_files/trick.js\n");

/***/ }),

/***/ "./src/game_files/util.js":
/*!********************************!*\
  !*** ./src/game_files/util.js ***!
  \********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"canvasSize\": function() { return /* binding */ canvasSize; },\n/* harmony export */   \"createPoints\": function() { return /* binding */ createPoints; },\n/* harmony export */   \"sortCards\": function() { return /* binding */ sortCards; }\n/* harmony export */ });\nfunction sortCards(array) {\n  function sorter(card1, card2) {\n    //Return 1 if card 1 > card 2\n    //Return -1 if card 1 < card 2\n    const suits = [\"Spades\", \"Hearts\", \"Diamond\", \"Clubs\"];\n    if (card1.value > card2.value) {\n      return 1;\n    } else if (card1.value < card2.value) {\n      return -1;\n    } else {\n      if (suits.indexOf(card1.suit) < suits.indexOf(card2.suit)) {\n        return 1;\n      } else {\n        return -1;\n      }\n    }\n  }\n  let pivot = array[0];\n  if (array.length < 2) return array;\n  let left = array.slice(1).filter(ele => sorter(pivot, ele) === -1);\n  let right = array.slice(1).filter(ele => sorter(pivot, ele) === 1);\n  let leftSorted = sortCards(left);\n  let rightSorted = sortCards(right);\n  return leftSorted.concat([pivot]).concat(rightSorted);\n}\nfunction createPoints(pos, box) {\n  const points = [{\n    x: pos[0],\n    y: pos[1]\n  }, {\n    x: pos[0] + box[0],\n    y: pos[1]\n  }, {\n    x: pos[0] + box[0],\n    y: pos[1] + box[1]\n  }, {\n    x: pos[0],\n    y: pos[1] + box[1]\n  }];\n  return points;\n}\nfunction canvasSize() {\n  const windowWidth = window.innerWidth;\n  const windowHeight = window.innerHeight;\n  const canvasDimensions = [[900, 600], [1200, 800], [1500, 1000]];\n  let canvasSize = canvasDimensions[0];\n  if (windowWidth > canvasDimensions[2][0] + 200 && windowHeight > canvasDimensions[2][1] + 100) {\n    canvasSize = canvasDimensions[2];\n    return {\n      canvasSize: canvasSize,\n      size: \"Large\"\n    };\n  } else if (windowWidth > canvasDimensions[1][0] + 200 && windowHeight > canvasDimensions[1][1] + 100) {\n    canvasSize = canvasDimensions[1];\n    return {\n      canvasSize: canvasSize,\n      size: \"Medium\"\n    };\n  } else {\n    canvasSize = canvasDimensions[0];\n    return {\n      canvasSize: canvasSize,\n      size: \"Small\"\n    };\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RUFBQyxDQUFDLElBQUksRUFBQyxHQUFHLENBQUMsRUFBQyxDQUFDLElBQUksRUFBQyxJQUFJLENBQUMsQ0FBQztFQUMzRCxJQUFJTixVQUFVLEdBQUdNLGdCQUFnQixDQUFDLENBQUMsQ0FBQztFQUNwQyxJQUFJTCxXQUFXLEdBQUdLLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLEdBQUksSUFBS0YsWUFBWSxHQUFHRSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxHQUFJLEVBQUM7SUFDekZOLFVBQVUsR0FBR00sZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO0lBQ2hDLE9BQU87TUFBQ04sVUFBVSxFQUFFQSxVQUFVO01BQUVPLElBQUksRUFBRTtJQUFPLENBQUM7RUFDbEQsQ0FBQyxNQUFNLElBQUdOLFdBQVcsR0FBRUssZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsR0FBSSxJQUFLRixZQUFZLEdBQUVFLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLEdBQUssRUFBQztJQUM5Rk4sVUFBVSxHQUFHTSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7SUFDaEMsT0FBTztNQUFDTixVQUFVLEVBQUVBLFVBQVU7TUFBRU8sSUFBSSxFQUFFO0lBQVEsQ0FBQztFQUNuRCxDQUFDLE1BQUs7SUFDRlAsVUFBVSxHQUFHTSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7SUFDaEMsT0FBTztNQUFDTixVQUFVLEVBQUVBLFVBQVU7TUFBRU8sSUFBSSxFQUFFO0lBQU8sQ0FBQztFQUNsRDtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2Fybml2YWxwb2tlci8uL3NyYy9nYW1lX2ZpbGVzL3V0aWwuanM/YWRiMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcclxuZXhwb3J0IGZ1bmN0aW9uIHNvcnRDYXJkcyhhcnJheSl7XHJcbiAgICAgICAgZnVuY3Rpb24gc29ydGVyKGNhcmQxLGNhcmQyKXtcclxuICAgICAgICAgICAgLy9SZXR1cm4gMSBpZiBjYXJkIDEgPiBjYXJkIDJcclxuICAgICAgICAgICAgLy9SZXR1cm4gLTEgaWYgY2FyZCAxIDwgY2FyZCAyXHJcbiAgICAgICAgICAgIGNvbnN0IHN1aXRzID0gW1wiU3BhZGVzXCIsXCJIZWFydHNcIixcIkRpYW1vbmRcIixcIkNsdWJzXCJdXHJcbiAgICAgICAgICAgIGlmKGNhcmQxLnZhbHVlPmNhcmQyLnZhbHVlKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiAxXHJcbiAgICAgICAgICAgIH1lbHNlIGlmKGNhcmQxLnZhbHVlPGNhcmQyLnZhbHVlKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiAtMSBcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICBpZihzdWl0cy5pbmRleE9mKGNhcmQxLnN1aXQpPHN1aXRzLmluZGV4T2YoY2FyZDIuc3VpdCkpe1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAxXHJcbiAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTEgXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHBpdm90ID0gYXJyYXlbMF07XHJcbiAgICAgICAgaWYoYXJyYXkubGVuZ3RoIDwgMikgcmV0dXJuIGFycmF5O1xyXG4gICAgICAgIGxldCBsZWZ0ID0gYXJyYXkuc2xpY2UoMSkuZmlsdGVyKChlbGUpID0+IHNvcnRlcihwaXZvdCxlbGUpID09PSAtMSk7XHJcbiAgICAgICAgbGV0IHJpZ2h0ID0gYXJyYXkuc2xpY2UoMSkuZmlsdGVyKChlbGUpID0+IHNvcnRlcihwaXZvdCxlbGUpID09PSAxKTtcclxuICAgICAgICBsZXQgbGVmdFNvcnRlZCA9IHNvcnRDYXJkcyhsZWZ0KTtcclxuICAgICAgICBsZXQgcmlnaHRTb3J0ZWQgPSBzb3J0Q2FyZHMocmlnaHQpO1xyXG4gICAgICAgIHJldHVybiBsZWZ0U29ydGVkLmNvbmNhdChbcGl2b3RdKS5jb25jYXQocmlnaHRTb3J0ZWQpO1xyXG4gICAgfVxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUG9pbnRzKHBvcyxib3gpe1xyXG4gICAgICAgIGNvbnN0IHBvaW50cyA9W3tcclxuICAgICAgICAgICAgeDogcG9zWzBdLFxyXG4gICAgICAgICAgICB5OiBwb3NbMV1cclxuICAgICAgICB9LHtcclxuICAgICAgICAgICAgeDogcG9zWzBdK2JveFswXSxcclxuICAgICAgICAgICAgeTogcG9zWzFdXHJcbiAgICAgICAgfSx7XHJcbiAgICAgICAgICAgIHg6IHBvc1swXStib3hbMF0sXHJcbiAgICAgICAgICAgIHk6IHBvc1sxXStib3hbMV1cclxuICAgICAgICB9LHtcclxuICAgICAgICAgICAgeDogcG9zWzBdLFxyXG4gICAgICAgICAgICB5OiBwb3NbMV0rYm94WzFdXHJcbiAgICAgICAgfVxyXG4gICAgXTtcclxuICAgIHJldHVybiBwb2ludHM7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjYW52YXNTaXplKCkge1xyXG4gICAgY29uc3Qgd2luZG93V2lkdGg9IHdpbmRvdy5pbm5lcldpZHRoO1xyXG4gICAgY29uc3Qgd2luZG93SGVpZ2h0PSB3aW5kb3cuaW5uZXJIZWlnaHQ7XHJcbiAgICBjb25zdCBjYW52YXNEaW1lbnNpb25zID0gW1s5MDAsNjAwXSxbMTIwMCw4MDBdLFsxNTAwLDEwMDBdXVxyXG4gICAgbGV0IGNhbnZhc1NpemUgPSBjYW52YXNEaW1lbnNpb25zWzBdO1xyXG4gICAgaWYoKHdpbmRvd1dpZHRoKT4oY2FudmFzRGltZW5zaW9uc1syXVswXSsyMDApICYmICh3aW5kb3dIZWlnaHQpPihjYW52YXNEaW1lbnNpb25zWzJdWzFdKzEwMCkpe1xyXG4gICAgICAgIGNhbnZhc1NpemUgPSBjYW52YXNEaW1lbnNpb25zWzJdO1xyXG4gICAgICAgIHJldHVybiB7Y2FudmFzU2l6ZTogY2FudmFzU2l6ZSwgc2l6ZTogXCJMYXJnZVwifVxyXG4gICAgfSBlbHNlIGlmKHdpbmRvd1dpZHRoPihjYW52YXNEaW1lbnNpb25zWzFdWzBdKzIwMCkgJiYgKHdpbmRvd0hlaWdodD4oY2FudmFzRGltZW5zaW9uc1sxXVsxXSsxMDApKSl7XHJcbiAgICAgICAgY2FudmFzU2l6ZSA9IGNhbnZhc0RpbWVuc2lvbnNbMV07XHJcbiAgICAgICAgcmV0dXJuIHtjYW52YXNTaXplOiBjYW52YXNTaXplLCBzaXplOiBcIk1lZGl1bVwifVxyXG4gICAgfWVsc2Uge1xyXG4gICAgICAgIGNhbnZhc1NpemUgPSBjYW52YXNEaW1lbnNpb25zWzBdO1xyXG4gICAgICAgIHJldHVybiB7Y2FudmFzU2l6ZTogY2FudmFzU2l6ZSwgc2l6ZTogXCJTbWFsbFwifVxyXG4gICAgfVxyXG59Il0sIm5hbWVzIjpbInNvcnRDYXJkcyIsImFycmF5Iiwic29ydGVyIiwiY2FyZDEiLCJjYXJkMiIsInN1aXRzIiwidmFsdWUiLCJpbmRleE9mIiwic3VpdCIsInBpdm90IiwibGVuZ3RoIiwibGVmdCIsInNsaWNlIiwiZmlsdGVyIiwiZWxlIiwicmlnaHQiLCJsZWZ0U29ydGVkIiwicmlnaHRTb3J0ZWQiLCJjb25jYXQiLCJjcmVhdGVQb2ludHMiLCJwb3MiLCJib3giLCJwb2ludHMiLCJ4IiwieSIsImNhbnZhc1NpemUiLCJ3aW5kb3dXaWR0aCIsIndpbmRvdyIsImlubmVyV2lkdGgiLCJ3aW5kb3dIZWlnaHQiLCJpbm5lckhlaWdodCIsImNhbnZhc0RpbWVuc2lvbnMiLCJzaXplIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/game_files/util.js\n");

/***/ }),

/***/ "./src/game_files/view_game.js":
/*!*************************************!*\
  !*** ./src/game_files/view_game.js ***!
  \*************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("const Util = __webpack_require__(/*! ./util */ \"./src/game_files/util.js\");\nconst Game = __webpack_require__(/*! ./game */ \"./src/game_files/game.js\");\nconst Card = __webpack_require__(/*! ./card */ \"./src/game_files/card.js\");\nconst Trick = __webpack_require__(/*! ./trick */ \"./src/game_files/trick.js\");\nclass ViewGame {\n  constructor(game, ctx, pos, canvasSize) {\n    this.canvasSize = canvasSize;\n    this.game = game;\n    this.gameCtx = ctx;\n    this.allCards = [];\n    this.allTricks = [];\n    this.setupScreen();\n    this.buildTricksCards();\n    this.bindCanvas();\n    this.cardSelected = false;\n    this.pos = pos;\n    this.scaler = 1;\n    this.calcScaler();\n  }\n  calcScaler() {\n    if (this.canvasSize[0] === 900) {\n      return this.scaler = 0.75;\n    } else if (this.canvasSize[0] === 1500) {\n      return this.scaler = 1.25;\n    }\n  }\n  resetCardLinks() {\n    let tricksidx = [1, 2, 3, 4, 5, 6, 7, 8];\n    let cardsidx = [0, 1, 2, 3, 4];\n    for (let i = 1; i < tricksidx.length; i++) {\n      for (let j = 0; j < cardsidx.length; j++) {\n        let cardobj = document.getElementById(`${i}-${j}`);\n        cardobj.src = \"./images/transparent.png\";\n      }\n    }\n  }\n  buildTricksCards() {\n    // 2D array, first item is the shape array. second item is the card.\n    // Loop through player tricks and build each card. \n    let tricks = this.game.player.tricks;\n    let allCards = [];\n    let allTricks = [];\n    // console.log(tricks,\"player tricks\");\n    for (let i = 0; i < tricks.length; i++) {\n      let trick = tricks[i];\n      allTricks.push(trick);\n      // console.log(trick,\"a grabbed trick\");\n      for (let j = 0; j < trick.cards.length; j++) {\n        let card = trick.cards[j];\n        // console.log(card,\"a grabbed card\");\n        allCards.push(card);\n      }\n    }\n    this.allCards = allCards;\n    this.allTricks = allTricks;\n  }\n  tracePath(object, ctx) {\n    let points = object.points;\n    ctx.beginPath();\n    ctx.moveTo(points[0].x, points[0].y);\n    for (let i = 1; i < points.length; i++) {\n      ctx.lineTo(points[i].x, points[i].y);\n    }\n  }\n  bindCanvas() {\n    let canvas = document.getElementById(\"game\");\n    // console.log(canvas,\"canvasgrabbed\");\n    canvas.addEventListener('click', this.handleCanvasClick.bind(this));\n  }\n  // bindDealer(){\n  //     let canvas = document.getElementById(\"game\");\n  //     // console.log(canvas,\"canvasgrabbed\");\n  //     canvas.addEventListener('click',this.handleDealerCanvasClick.bind(this))\n  // }\n  // handleDealerCanvasClick(e) {\n  //     e.preventDefault();\n  //     console.log(\"Click detected\")\n\n  //     let xOffset = this.pos[0];\n  //     let yOffset = this.pos[1];\n  //     let mouseX = parseInt(e.clientX - xOffset);\n  //     let mouseY = parseInt(e.clientY - yOffset);\n  //     console.log([e.clientX,e.clientY],\"Event Mouse Click Array\")\n  //     console.log([mouseX,mouseY],\"Mouse Click Pos After Offsets\")\n  //     const newScoreRoundButton = [[1000,345],[160,80]];\n  //     const newScoreRoundButtonPoints = Util.createPoints(newScoreRoundButton[0],newScoreRoundButton[1]);\n  //     let points = {points: newScoreRoundButtonPoints}\n  //     this.tracePath(points,this.gameCtx)\n  //     if(this.gameCtx.isPointInPath(mouseX,mouseY)){\n  //         console.log(\"Click on Score Round\");\n  //         this.playRound();\n  //     }\n\n  // }\n\n  handleCanvasClick(e) {\n    // e.preventDefault();\n    // console.log(\"Click detected\")\n    // console.log(this.cardSelected,\"Card Selected?\")\n    let xOffset = this.pos[0];\n    let yOffset = this.pos[1];\n    let mouseX = parseInt(e.clientX - xOffset);\n    let mouseY = parseInt(e.clientY - yOffset);\n    // console.log([e.clientX,e.clientY],\"Event Mouse Click Array\")\n    // console.log([mouseX,mouseY],\"Mouse Click Pos After Offsets\")\n    // console.log([this.allCards.length],\"Card Array Length\");\n    // console.log([this.allTricks.length],\"Trick Array Length\");\n    // see if a card has been clicked on\n    if (this.cardSelected === false) {\n      for (let i = 0; i < this.allCards.length; i++) {\n        let card = this.allCards[i];\n        // console.log(card.pos,\"Card Pos\");\n        this.tracePath(card, this.gameCtx);\n        if (this.gameCtx.isPointInPath(mouseX, mouseY)) {\n          this.cardSelected = card;\n          card.selected = true;\n          // console.log(card,\"grabbed card\");\n          this.game.player.animate(this.gameCtx);\n          this.buildTricksCards();\n          break;\n        }\n      }\n    } else if (this.cardSelected) {\n      for (let i = 0; i < this.allTricks.length; i++) {\n        let trick = this.allTricks[i];\n        // console.log(trick.pos,\"Trick Pos\");\n        this.tracePath(trick, this.gameCtx);\n        if (this.gameCtx.isPointInPath(mouseX, mouseY)) {\n          // console.log(trick,\"grabbed trick\");\n          this.moveCard(this.cardSelected, trick);\n          this.game.player.animate(this.gameCtx);\n          this.buildTricksCards();\n        }\n      }\n    }\n    const newTrickButton = [[995 / 1200 * this.canvasSize[0], 515 / 800 * this.canvasSize[1]], [Card.CARDWIDTH + Card.CARDWIDTH * 0.25, Card.CARDHEIGHT]];\n    const newCardButton = [[1020 / 1200 * this.canvasSize[0], 405 / 800 * this.canvasSize[1]], [Card.CARDWIDTH, Card.CARDHEIGHT]];\n    const newTrickButtonPoints = Util.createPoints(newTrickButton[0], newTrickButton[1]);\n    const newCardButtonPoints = Util.createPoints(newCardButton[0], newCardButton[1]);\n    // Eventually need to error handle if there isnt enough gold\n    if (this.game.player.gold >= 6) {\n      let points = {\n        points: newTrickButtonPoints\n      };\n      this.tracePath(points, this.gameCtx);\n      if (this.gameCtx.isPointInPath(mouseX, mouseY)) {\n        // console.log(\"Clicked on Trick Button\");\n        this.game.player.activateNextTrick();\n        this.game.player.gold -= 6;\n        this.game.player.animate(this.gameCtx);\n        this.buildTricksCards();\n      }\n    }\n    // Eventually error handle not enough gold\n    if (this.game.player.gold >= 2) {\n      let points = {\n        points: newCardButtonPoints\n      };\n      this.tracePath(points, this.gameCtx);\n      if (this.gameCtx.isPointInPath(mouseX, mouseY)) {\n        // console.log(\"Clicked on Card Button\");\n        this.game.drawPlayer();\n        this.game.player.gold -= 2;\n        this.game.player.animate(this.gameCtx);\n        this.buildTricksCards();\n      }\n    }\n    // New Round button\n    //525,470,140,50\n    const newScoreRoundButton = [[500 / 1200 * this.canvasSize[0], 470 / 800 * this.canvasSize[1]], [140 * this.scaler, 50 * this.scaler]];\n    const newScoreRoundButtonPoints = Util.createPoints(newScoreRoundButton[0], newScoreRoundButton[1]);\n    let points = {\n      points: newScoreRoundButtonPoints\n    };\n    this.tracePath(points, this.gameCtx);\n    if (this.gameCtx.isPointInPath(mouseX, mouseY) && this.game.round <= Game.MAXROUNDS) {\n      // console.log(this.game.round,\"Round#\");\n      this.playRound();\n    }\n  }\n  moveCard(card, trick) {\n    let ownerid = card.trickid;\n    let owner;\n    this.allTricks.forEach(trick => {\n      if (trick.trickid === ownerid) {\n        owner = trick;\n        owner.removeCard(card);\n        owner.updateCards();\n        owner.evaluatePoker();\n      }\n    });\n    if (trick.addCard(card)) {\n      trick.updateCards();\n      trick.evaluatePoker();\n      this.cardSelected.selected = false;\n      this.cardSelected = false;\n    } else {\n      owner.addCard(card);\n      owner.updateCards();\n      owner.evaluatePoker();\n      this.cardSelected.selected = false;\n      this.cardSelected = false;\n    }\n  }\n  setupScreen() {\n    this.resetCardLinks();\n    this.gameCtx.clearRect(0, 0, this.canvasSize[0], this.canvasSize[1]);\n    this.game.animate(this.gameCtx);\n    this.game.dealer.animate(this.gameCtx);\n    this.game.player.animate(this.gameCtx);\n    this.animateScores();\n    this.buildTricksCards();\n  }\n  animateScores() {\n    this.calcScaler();\n    let scaler = this.scaler || 1;\n    this.gameCtx.font = `${40 * scaler}px Arial`;\n    this.gameCtx.fillStyle = \"#FFFFFF\";\n    this.gameCtx.clearRect(250 / 1200 * this.canvasSize[0], 0, 300, 150 / 800 * this.canvasSize[1]);\n    this.gameCtx.onload = () => {\n      this.calcScaler();\n      this.gameCtx.font = `${40}px Arial`;\n      this.gameCtx.clearRect(300 / 1200 * this.canvasSize[0], 0, 300, 150 / 800 * this.canvasSize[1]);\n      this.gameCtx.fillText(`Dealer Hands`, 300 / 1200 * this.canvasSize[0], 190 / 800 * this.canvasSize[1]);\n    };\n    this.gameCtx.fillText(`Dealer Hands`, 300 / 1200 * this.canvasSize[0], 190 / 800 * this.canvasSize[1]);\n\n    //Draw Score Button\n    this.gameCtx.font = `${24 * scaler}px Arial Bold`;\n    this.gameCtx.fillStyle = \"#003399\";\n    this.gameCtx.fillRect(525 / 1200 * this.canvasSize[0], 470 / 800 * this.canvasSize[1], 140 * scaler, 50 * scaler);\n    this.gameCtx.fillStyle = \"#FFFFFF\";\n    this.gameCtx.fillText(`Score Round`, 535 / 1200 * this.canvasSize[0], 500 / 800 * this.canvasSize[1]);\n    this.gameCtx.lineWidth = 3;\n    this.gameCtx.strokeStyle = \"#FFFFFF\";\n    this.gameCtx.strokeRect(525 / 1200 * this.canvasSize[0], 470 / 800 * this.canvasSize[1], 140 * scaler, 50 * scaler);\n    //Player Score \n    this.gameCtx.fillStyle = \"#003399\";\n    this.gameCtx.fillRect(285 / 1200 * this.canvasSize[0], 470 / 800 * this.canvasSize[1], 180 * scaler, 50 * scaler);\n    this.gameCtx.fillStyle = \"#FFFFFF\";\n    this.gameCtx.fillText(`Player Score: ${this.game.player.score}`, 295 / 1200 * this.canvasSize[0], 500 / 800 * this.canvasSize[1]);\n    this.gameCtx.lineWidth = 3;\n    this.gameCtx.strokeStyle = \"#FFFFFF\";\n    this.gameCtx.strokeRect(285 / 1200 * this.canvasSize[0], 470 / 800 * this.canvasSize[1], 180 * scaler, 50 * scaler);\n    //Dealer Score \n    this.gameCtx.fillStyle = \"#003399\";\n    this.gameCtx.fillRect(735 / 1200 * this.canvasSize[0], 470 / 800 * this.canvasSize[1], 180 * scaler, 50 * scaler);\n    this.gameCtx.fillStyle = \"#FFFFFF\";\n    this.gameCtx.fillText(`Dealer Score: ${this.game.dealer.score}`, 742 / 1200 * this.canvasSize[0], 500 / 800 * this.canvasSize[1]);\n    this.gameCtx.lineWidth = 3;\n    this.gameCtx.strokeStyle = \"#FFFFFF\";\n    this.gameCtx.strokeRect(735 / 1200 * this.canvasSize[0], 470 / 800 * this.canvasSize[1], 180 * scaler, 50 * scaler);\n  }\n  playRound() {\n    this.game.nextRound();\n    this.setupScreen();\n    this.buildTricksCards();\n    const roundscore = document.getElementById(\"roundscore\");\n    const overlay = document.getElementById(\"overlay\");\n    overlay.style.display = \"block\";\n    roundscore.style.display = \"flex\";\n  }\n}\nmodule.exports = ViewGame;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/game_files/view_game.js\n");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval("const Game = __webpack_require__(/*! ./game_files/game */ \"./src/game_files/game.js\");\nconst ViewGame = __webpack_require__(/*! ./game_files/view_game */ \"./src/game_files/view_game.js\");\n\n//Questions:\n// Ask about event handelers and what should own them\n// \n\nconst windowWidth = window.innerWidth;\nconst windowHeight = window.innerHeight;\n// console.log(windowWidth,windowHeight,\"window X Y\")\n//Width,Height\n// 1400,1000 with 1200,800. so +\n// In essence, this is +- 25%\nconst canvasDimensions = [[900, 600], [1200, 800], [1500, 1000]];\nconst gameCanvas = document.getElementById(\"canvas\");\nconst gameCtx = gameCanvas.getContext(\"2d\");\nlet canvasSize = canvasDimensions[0];\nif (windowWidth > canvasDimensions[2][0] + 200 && windowHeight > canvasDimensions[2][1] + 100) {\n  canvasSize = canvasDimensions[2];\n} else if (windowWidth > canvasDimensions[1][0] + 200 && windowHeight > canvasDimensions[1][1] + 100) {\n  canvasSize = canvasDimensions[1];\n} else {\n  canvasSize = canvasDimensions[0];\n}\n// console.log([windowWidth,canvasDimensions[1][0]+200,windowHeight,canvasDimensions[1][1]+100],\"Deduce Canvas\")\n\n// console.log(canvasSize,\"canvasSize\")\ngameCanvas.setAttribute(\"width\", canvasSize[0]);\ngameCanvas.setAttribute(\"height\", canvasSize[1]);\nconst game = new Game(canvasSize);\nconst gameCanvasRect = gameCanvas.getBoundingClientRect();\nconst gamepos = [gameCanvasRect.x, gameCanvasRect.y];\n// console.log(gamepos,\"gamepos\")\nlet view = new ViewGame(game, gameCtx, gamepos, canvasSize);\nconst overlay = document.getElementById(\"overlay\");\nconst start = document.getElementById(\"start\");\nconst gameover = document.getElementById(\"gameover\");\nconst startbutton = document.getElementById(\"start-button\");\nconst roundscore = document.getElementById(\"roundscore\");\nconst continuebutton = document.getElementById(\"continuebutton\");\nconst restartbutton = document.getElementById(\"restartbutton\");\nconst instructions = document.getElementById(\"instructions\");\nstartbutton.addEventListener('click', () => {\n  overlay.style.display = \"none\";\n  start.style.display = \"none\";\n});\ninstructions.addEventListener('click', () => {\n  overlay.style.display = \"block\";\n  start.style.display = \"block\";\n});\ncontinuebutton.addEventListener('click', () => {\n  overlay.style.display = \"none\";\n  roundscore.style.display = \"none\";\n  if (game.round < Game.MAXROUNDS) {\n    view.game.drawDealer();\n    view.setupScreen();\n  } else {\n    const playerscore = document.getElementById(\"finalplayerscore\");\n    const dealerscore = document.getElementById(\"finaldealerscore\");\n    const winner = document.getElementById(\"winner\");\n    const result = game.winner();\n    // console.log([playerscore,dealerscore,winner],\"edits\")\n    playerscore.innerText = result[0];\n    dealerscore.innerText = result[1];\n    winner.innerText = result[2];\n    overlay.style.display = \"block\";\n    gameover.style.display = \"block\";\n  }\n});\nrestartbutton.addEventListener('click', () => {\n  const newGame = new Game(canvasSize);\n  view = new ViewGame(newGame, gameCtx, gamepos, canvasSize);\n  gameover.style.display = \"none\";\n});\nwindow.game = game;\nwindow.view = view;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYXJuaXZhbHBva2VyLy4vc3JjL2luZGV4LnNjc3M/OTc0NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__("./src/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.scss");
/******/ 	
/******/ })()
;