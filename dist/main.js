/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/game_files/card.js":
/*!********************************!*\
  !*** ./src/game_files/card.js ***!
  \********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nconst Util = __webpack_require__(/*! ./util */ \"./src/game_files/util.js\");\nconsole.log(Util.canvasSize(), \"Util canvasSize\");\nclass Card {\n  constructor(object) {\n    //#2-14\n    this.value = object.value;\n    // Suit needs to match the card save: Clubs, Diamond, Hearts, Spades\n    this.suit = object.suit;\n    // Code this in once ready to draw\n    this.sprite = new Image();\n    this.sprite.src = \"images/Cards/Medium/\" + this.suit + this.value + \".png\";\n    // console.log(this.sprite.src,\"Card Src\");\n    this.selected = false;\n    //Might need to know what trick we are inside, for event handling\n    this.trickid = 0;\n    this.pos = [0, 0];\n    this.points = [];\n  }\n  animate(ctx, spot) {\n    ctx.drawImage(this.sprite, spot[0], spot[1], Card.CARDWIDTH, Card.CARDHEIGHT);\n    if (this.selected) {\n      ctx.lineWidth = 3;\n      ;\n      ctx.strokeStyle = \"#FFFF00\";\n      ctx.strokeRect(spot[0], spot[1], Card.CARDWIDTH, Card.CARDHEIGHT);\n    }\n    this.sprite.onload = () => {\n      ctx.drawImage(this.sprite, spot[0], spot[1], Card.CARDWIDTH, Card.CARDHEIGHT);\n      if (this.selected) {\n        ctx.lineWidth = 3;\n        ctx.strokeStyle = \"#FFFF00\";\n        ctx.strokeRect(spot[0], spot[1], Card.CARDWIDTH, Card.CARDHEIGHT);\n      }\n    };\n  }\n  updatePoints(pos) {\n    this.pos = pos || this.pos;\n    this.points = [{\n      x: this.pos[0],\n      y: this.pos[1]\n    }, {\n      x: this.pos[0] + Card.CARDWIDTH,\n      y: this.pos[1]\n    }, {\n      x: this.pos[0] + Card.CARDWIDTH,\n      y: this.pos[1] + Card.CARDHEIGHT\n    }, {\n      x: this.pos[0],\n      y: this.pos[1] + Card.CARDHEIGHT\n    }];\n  }\n}\n_defineProperty(Card, \"CARDDIMENSIONS\", [[41, 60], [55, 80], [69, 100]]);\n_defineProperty(Card, \"canvasSize\", Util.canvasSize().size);\n_defineProperty(Card, \"CARDWIDTH\", Card.canvasSize === \"Large\" ? Card.CARDDIMENSIONS[2][0] : Card.canvasSize === \"Medium\" ? Card.CARDDIMENSIONS[1][0] : Card.CARDDIMENSIONS[0][0]);\n_defineProperty(Card, \"CARDHEIGHT\", Card.canvasSize === \"Large\" ? Card.CARDDIMENSIONS[2][1] : Card.canvasSize === \"Medium\" ? Card.CARDDIMENSIONS[1][1] : Card.CARDDIMENSIONS[0][1]);\nmodule.exports = Card;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SSxDQU02RUQsVUFBVSxLQUFLLFFBQVEsR0FOeEdDLElBQUksQ0FPQzJCLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FQekIzQixJQUFJLENBTzZCMkIsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQXFEM0RDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHN0IsSUFBSSIsInNvdXJjZXMiOlsid2VicGFjazovL2Nhcm5pdmFscG9rZXIvLi9zcmMvZ2FtZV9maWxlcy9jYXJkLmpzPzJmMTIiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgVXRpbCA9IHJlcXVpcmUoXCIuL3V0aWxcIilcclxuXHJcbmNvbnNvbGUubG9nKFV0aWwuY2FudmFzU2l6ZSgpLFwiVXRpbCBjYW52YXNTaXplXCIpXHJcbmNsYXNzIENhcmQge1xyXG4gICAgc3RhdGljIENBUkRESU1FTlNJT05TID0gW1s0MSw2MF0sWzU1LDgwXSxbNjksMTAwXV1cclxuICAgIFxyXG4gICAgc3RhdGljIGNhbnZhc1NpemUgPSBVdGlsLmNhbnZhc1NpemUoKS5zaXplO1xyXG4gICAgc3RhdGljIENBUkRXSURUSCA9IHRoaXMuY2FudmFzU2l6ZSA9PT0gXCJMYXJnZVwiID8gdGhpcy5DQVJERElNRU5TSU9OU1syXVswXSA6IHRoaXMuY2FudmFzU2l6ZSA9PT0gXCJNZWRpdW1cIiBcclxuICAgICAgICA/IHRoaXMuQ0FSRERJTUVOU0lPTlNbMV1bMF0gOiB0aGlzLkNBUkRESU1FTlNJT05TWzBdWzBdO1xyXG4gICAgc3RhdGljIENBUkRIRUlHSFQgPSB0aGlzLmNhbnZhc1NpemUgPT09IFwiTGFyZ2VcIiA/IHRoaXMuQ0FSRERJTUVOU0lPTlNbMl1bMV0gOiB0aGlzLmNhbnZhc1NpemUgPT09IFwiTWVkaXVtXCIgXHJcbiAgICA/IHRoaXMuQ0FSRERJTUVOU0lPTlNbMV1bMV0gOiB0aGlzLkNBUkRESU1FTlNJT05TWzBdWzFdO1xyXG4gICAgY29uc3RydWN0b3Iob2JqZWN0KSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8jMi0xNFxyXG4gICAgICAgIHRoaXMudmFsdWUgPSBvYmplY3QudmFsdWU7XHJcbiAgICAgICAgLy8gU3VpdCBuZWVkcyB0byBtYXRjaCB0aGUgY2FyZCBzYXZlOiBDbHVicywgRGlhbW9uZCwgSGVhcnRzLCBTcGFkZXNcclxuICAgICAgICB0aGlzLnN1aXQgPSBvYmplY3Quc3VpdDtcclxuICAgICAgICAvLyBDb2RlIHRoaXMgaW4gb25jZSByZWFkeSB0byBkcmF3XHJcbiAgICAgICAgdGhpcy5zcHJpdGUgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICB0aGlzLnNwcml0ZS5zcmMgPSBcImltYWdlcy9DYXJkcy9NZWRpdW0vXCIrdGhpcy5zdWl0K3RoaXMudmFsdWUrXCIucG5nXCI7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2codGhpcy5zcHJpdGUuc3JjLFwiQ2FyZCBTcmNcIik7XHJcbiAgICAgICAgdGhpcy5zZWxlY3RlZCA9IGZhbHNlO1xyXG4gICAgICAgIC8vTWlnaHQgbmVlZCB0byBrbm93IHdoYXQgdHJpY2sgd2UgYXJlIGluc2lkZSwgZm9yIGV2ZW50IGhhbmRsaW5nXHJcbiAgICAgICAgdGhpcy50cmlja2lkID0gMDtcclxuICAgICAgICB0aGlzLnBvcyA9IFswLDBdO1xyXG4gICAgICAgIHRoaXMucG9pbnRzID1bXTtcclxuICAgIH1cclxuICAgIGFuaW1hdGUoY3R4LHNwb3Qpe1xyXG4gICAgICAgIGN0eC5kcmF3SW1hZ2UodGhpcy5zcHJpdGUsc3BvdFswXSxzcG90WzFdLENhcmQuQ0FSRFdJRFRILENhcmQuQ0FSREhFSUdIVClcclxuICAgICAgICBpZih0aGlzLnNlbGVjdGVkKXtcclxuICAgICAgICBjdHgubGluZVdpZHRoID0gMzs7XHJcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gXCIjRkZGRjAwXCI7XHJcbiAgICAgICAgY3R4LnN0cm9rZVJlY3Qoc3BvdFswXSxzcG90WzFdLENhcmQuQ0FSRFdJRFRILENhcmQuQ0FSREhFSUdIVCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc3ByaXRlLm9ubG9hZCA9ICgpPT4geyAgIFxyXG4gICAgICAgICAgICBjdHguZHJhd0ltYWdlKHRoaXMuc3ByaXRlLHNwb3RbMF0sc3BvdFsxXSxDYXJkLkNBUkRXSURUSCxDYXJkLkNBUkRIRUlHSFQpO1xyXG4gICAgICAgICAgICBpZih0aGlzLnNlbGVjdGVkKXtcclxuICAgICAgICAgICAgICAgIGN0eC5saW5lV2lkdGggPSAzO1xyXG4gICAgICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gXCIjRkZGRjAwXCI7XHJcbiAgICAgICAgICAgICAgICBjdHguc3Ryb2tlUmVjdChzcG90WzBdLHNwb3RbMV0sQ2FyZC5DQVJEV0lEVEgsQ2FyZC5DQVJESEVJR0hUKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgfVxyXG4gICAgdXBkYXRlUG9pbnRzKHBvcyl7XHJcbiAgICAgICAgdGhpcy5wb3MgPSBwb3MgfHwgdGhpcy5wb3M7XHJcbiAgICAgICAgdGhpcy5wb2ludHMgPVt7XHJcbiAgICAgICAgICAgIHg6IHRoaXMucG9zWzBdLFxyXG4gICAgICAgICAgICB5OiB0aGlzLnBvc1sxXVxyXG4gICAgICAgIH0se1xyXG4gICAgICAgICAgICB4OiB0aGlzLnBvc1swXStDYXJkLkNBUkRXSURUSCxcclxuICAgICAgICAgICAgeTogdGhpcy5wb3NbMV1cclxuICAgICAgICB9LHtcclxuICAgICAgICAgICAgeDogdGhpcy5wb3NbMF0rQ2FyZC5DQVJEV0lEVEgsXHJcbiAgICAgICAgICAgIHk6IHRoaXMucG9zWzFdK0NhcmQuQ0FSREhFSUdIVFxyXG4gICAgICAgIH0se1xyXG4gICAgICAgICAgICB4OiB0aGlzLnBvc1swXSxcclxuICAgICAgICAgICAgeTogdGhpcy5wb3NbMV0rQ2FyZC5DQVJESEVJR0hUXHJcbiAgICAgICAgfVxyXG4gICAgXTtcclxuICAgIH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBDYXJkOyAiXSwibmFtZXMiOlsiVXRpbCIsInJlcXVpcmUiLCJjb25zb2xlIiwibG9nIiwiY2FudmFzU2l6ZSIsIkNhcmQiLCJjb25zdHJ1Y3RvciIsIm9iamVjdCIsInZhbHVlIiwic3VpdCIsInNwcml0ZSIsIkltYWdlIiwic3JjIiwic2VsZWN0ZWQiLCJ0cmlja2lkIiwicG9zIiwicG9pbnRzIiwiYW5pbWF0ZSIsImN0eCIsInNwb3QiLCJkcmF3SW1hZ2UiLCJDQVJEV0lEVEgiLCJDQVJESEVJR0hUIiwibGluZVdpZHRoIiwic3Ryb2tlU3R5bGUiLCJzdHJva2VSZWN0Iiwib25sb2FkIiwidXBkYXRlUG9pbnRzIiwieCIsInkiLCJfZGVmaW5lUHJvcGVydHkiLCJzaXplIiwiQ0FSRERJTUVOU0lPTlMiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/game_files/card.js\n");

/***/ }),

/***/ "./src/game_files/dealer.js":
/*!**********************************!*\
  !*** ./src/game_files/dealer.js ***!
  \**********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("const Trick = __webpack_require__(/*! ./trick */ \"./src/game_files/trick.js\");\nconst Player = __webpack_require__(/*! ./player */ \"./src/game_files/player.js\");\nconst Util = __webpack_require__(/*! ./util */ \"./src/game_files/util.js\");\nclass Dealer extends Player {\n  constructor(object) {\n    super(object);\n    this.dealerCards = [];\n    this.handTracker = {\n      result: []\n    };\n    this.makeTricks();\n  }\n  addCardBoard(card) {\n    for (let i = 0; i < this.tricks.length; i++) {\n      if (this.tricks[i].active && this.tricks[i].addCard(card)) {\n        break;\n      } else if (!this.tricks[i].active) {\n        this.activateNextTrick();\n        this.addCardBoard(card);\n        break;\n      }\n    }\n    this.dealerPlayCycle();\n    return true;\n  }\n  makeTricks() {\n    let trickArray = [];\n    let trick1 = new Trick({\n      pos: [this.pos[0], this.pos[1] + Trick.HEIGHT],\n      color: \"#FFA500\",\n      trickid: 5,\n      active: true\n    });\n    trickArray.push(trick1);\n    let trick2 = new Trick({\n      pos: [this.pos[0] + Trick.WIDTH, this.pos[1] + Trick.HEIGHT],\n      color: \"#00CC33\",\n      trickid: 6,\n      active: true\n    });\n    trickArray.push(trick2);\n    let trick3 = new Trick({\n      pos: this.pos,\n      color: \"#800080\",\n      trickid: 7,\n      active: false\n    });\n    trickArray.push(trick3);\n    let trick4 = new Trick({\n      pos: [this.pos[0] + Trick.WIDTH, this.pos[1]],\n      color: \"#0099FF\",\n      trickid: 8,\n      active: false\n    });\n    trickArray.push(trick4);\n    this.tricks = trickArray;\n  }\n  updateDealerCards() {\n    let newDealerCards = [];\n    this.tricks.forEach(trick => {\n      let array = [...trick.cards];\n      newDealerCards = [...newDealerCards, ...array];\n    });\n    this.dealerCards = newDealerCards;\n  }\n  updateCardTracker() {\n    let cards = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.dealerCards;\n    let object = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.handTracker;\n    console.log(cards, \"cards\");\n    object.cards = cards;\n    let values = [...Array(15).keys()].splice(2, 15);\n    values.forEach(value => {\n      object[value] = [];\n    });\n    let suits = [\"Clubs\", \"Hearts\", \"Diamond\", \"Spades\"];\n    suits.forEach(suit => {\n      object[suit] = [];\n    });\n    cards.forEach(card => {\n      let suit = card.suit;\n      let val = card.value;\n      object[suit].push(card);\n      object[val].push(card);\n    });\n    console.log(object, \"object = hand Tracker\");\n  }\n  updateBestHand() {\n    let object = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.handTracker;\n    this.updateCardTracker(object.cards, object);\n    if (object.cards.length <= 5) {\n      object.result.push(object.cards);\n      return object;\n    }\n    let flushCheck = [];\n    let straightCheck = [];\n    let fourKind = [];\n    let threeKind = [];\n    let twoKind = [];\n    // Check for flush\n    let suits = [\"Clubs\", \"Hearts\", \"Diamond\", \"Spades\"];\n    suits.forEach(suit => {\n      if (object[suit].length > 4) {\n        flushCheck = object[suit];\n      }\n    });\n\n    // Check for straight\n    let values = [...Array(15).keys()].splice(2, 15);\n    let chain = [];\n    values.forEach(value => {\n      if (object[value].length >= 4) {\n        fourKind.push(object[value]);\n      } else if (object[value].length === 3) {\n        threeKind.push(object[value]);\n      } else if (object[value].length === 2) {\n        twoKind.push(object[value]);\n      }\n      if (object[value][0]) {\n        chain.push(object[value][0]);\n        if (chain.length === 5) {\n          straightCheck = chain;\n        }\n      } else {\n        chain = [];\n      }\n    });\n    //\n    const cleanUpResult = () => {\n      let copyObject = {\n        ...object\n      };\n      console.log(copyObject, \"Object before card array clean\");\n      object.result.forEach(trick => {\n        trick.forEach(card => {\n          object.cards.forEach((card2, idx) => {\n            if (card.suit === card2.suit && card.value === card2.value) {\n              object.cards = object.cards.slice(0, idx).concat(object.cards.slice(idx + 1));\n            }\n          });\n        });\n      });\n      console.log(object, \"Object after card array clean\");\n      return this.updateBestHand(object);\n    };\n    console.log([twoKind, threeKind, fourKind, straightCheck, flushCheck], \"Check arrays\");\n    //Build Straight Flush\n    // if(flushCheck.length !== 0 && straightCheck.length !== 0){\n    //     let straightCards = straightCheck.filter((card)=>{\n    //         card.suit === flushCheck[0].suit;\n    //     })\n    //     let result = [];\n    //     for(let i = 0; i < 5; i++){\n    //         result.push(straightCards[i]);\n    //     }\n    //     object.result.push(result);\n    //     console.log(\"Found Straight Flush\")\n    //     return cleanUpResult();\n    // }\n    //Build Four of a Kind\n    if (fourKind.length) {\n      let result = [];\n      for (let i = 0; i < 4; i++) {\n        result.push(fourKind[0][i]);\n      }\n      object.result.push(result);\n      console.log(\"Found Four Kind\");\n      return cleanUpResult();\n    }\n    //Build Full House\n    if (threeKind.length && twoKind.length) {\n      let result = [];\n      for (let i = 0; i < 3; i++) {\n        result.push(threeKind[0][i]);\n        if (i !== 2) {\n          result.push(twoKind[0][i]);\n        }\n      }\n      object.result.push(result);\n      console.log(\"Found Full House\");\n      return cleanUpResult();\n    }\n    //Build Flush\n    if (flushCheck.length) {\n      let result = [];\n      for (let i = 0; i < 5; i++) {\n        result.push(flushCheck[i]);\n      }\n      object.result.push(result);\n      console.log(\"Found Flush\");\n      return cleanUpResult();\n    }\n    // Build Straight\n    if (straightCheck.length) {\n      let result = [];\n      for (let i = 0; i < 5; i++) {\n        result.push(straightCheck[i]);\n      }\n      object.result.push(result);\n      console.log(\"Found Straight\");\n      return cleanUpResult();\n    }\n    // Build three of a Kind\n    if (threeKind.length) {\n      let result = [];\n      for (let i = 0; i < 3; i++) {\n        result.push(threeKind[0][i]);\n      }\n      object.result.push(result);\n      console.log(\"Found Three\");\n      return cleanUpResult();\n    }\n    // Build two of a Kind\n    if (twoKind.length) {\n      if (twoKind.length > 1) {\n        let result = [];\n        for (let i = 0; i < 2; i++) {\n          result.push(twoKind[0][i]);\n          result.push(twoKind[1][i]);\n        }\n        console.log(result, \"Result in Two Pair\");\n        object.result.push(result);\n        return cleanUpResult();\n      }\n      let result = [];\n      for (let i = 0; i < 2; i++) {\n        result.push(twoKind[0][i]);\n      }\n      console.log(result, \"Result in Pair\");\n      object.result.push(result);\n      return cleanUpResult();\n    }\n    let result = [];\n    for (let i = 0; i < 5; i++) {\n      result.push(object.cards[i]);\n    }\n    console.log(result, \"Result in Nothing\");\n    object.result.push(result);\n    console.log(\"Found Nothing\");\n    return cleanUpResult();\n  }\n  dealerPlayCycle() {\n    this.updateDealerCards();\n    this.updateCardTracker();\n    if (this.dealerCards.length >= 5) {\n      this.handTracker.result = [];\n      this.updateBestHand();\n      console.log(this.handTracker, \"Hand Tracker\");\n      console.log(this.dealerCards, \"Dealer Cards\");\n    }\n    ;\n    if (this.activeTricks === this.handTracker.result.length) {\n      //Easy Case\n      this.handTracker.result.forEach((newTrick, idx) => {\n        this.tricks[idx].cards = [];\n        newTrick.forEach(card => {\n          this.tricks[idx].addCard(card);\n        });\n      });\n    } else {\n      if (this.handTracker.result.length > this.activeTricks) {\n        let flatResult = this.handTracker.result.flat();\n        for (let i = 0; i < this.activeTricks; i++) {\n          this.tricks[i].cards = [];\n          while (this.tricks[i].cards.length < 5 && flatResult.length > 0) {\n            this.tricks[i].addCard(flatResult.shift());\n          }\n        }\n      }\n    }\n  }\n  sumScores(scores) {\n    let score = 0;\n    scores.forEach(num => {\n      score += num;\n    });\n    return score;\n  }\n  newTrickSet() {\n    let trickArray = [];\n    let tempPos = this.pos;\n    let trick1 = new Trick({\n      pos: this.pos,\n      trickid: 1\n    });\n    trickArray.push(trick1);\n    let trick2 = new Trick({\n      pos: [this.pos[0] + 400, this.pos[1]],\n      color: \"#00FF00\",\n      trickid: 2\n    });\n    trickArray.push(trick2);\n    let trick3 = new Trick({\n      pos: [this.pos[0], this.pos[1] + 150],\n      color: \"#FF0000\",\n      trickid: 3,\n      active: false\n    });\n    trickArray.push(trick3);\n    let trick4 = new Trick({\n      pos: [this.pos[0] + 400, this.pos[1] + 150],\n      color: \"#0000FF\",\n      trickid: 4,\n      active: false\n    });\n    trickArray.push(trick4);\n    return trickArray;\n  }\n  nextDealerCard() {}\n}\nmodule.exports = Dealer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/game_files/dealer.js\n");

/***/ }),

/***/ "./src/game_files/deck.js":
/*!********************************!*\
  !*** ./src/game_files/deck.js ***!
  \********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("const Card = __webpack_require__(/*! ./card */ \"./src/game_files/card.js\");\nclass Deck {\n  constructor() {\n    this.cards = [];\n    this.makeCards();\n  }\n  makeCards() {\n    let allCards = [];\n    let values = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\n    let suits = [\"Clubs\", \"Hearts\", \"Diamond\", \"Spades\"];\n    for (let i = 0; i < values.length; i++) {\n      for (let j = 0; j < suits.length; j++) {\n        let cardObject = {\n          suit: suits[j],\n          value: values[i]\n        };\n        let card = new Card(cardObject);\n        allCards.push(card);\n      }\n    }\n    this.cards = allCards;\n    return true;\n  }\n  drawCard() {\n    const scaler = this.cards.length;\n    const random = Math.random();\n    const pick = Math.floor(scaler * random);\n    const chosen = this.cards[pick];\n    return this.cards.splice(this.cards.indexOf(chosen), 1)[0];\n  }\n}\n\n// let deck = new Deck();\n// console.log(deck.cards.length);\n// console.log(deck.drawCard());\n// console.log(deck.cards.length);\nmodule.exports = Deck;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvZ2FtZV9maWxlcy9kZWNrLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLElBQUksR0FBR0MsbUJBQU8sQ0FBQyx3Q0FBUSxDQUFDO0FBRTlCLE1BQU1DLElBQUksQ0FBQztFQUVIQyxXQUFXQSxDQUFBLEVBQUU7SUFDVCxJQUFJLENBQUNDLEtBQUssR0FBRyxFQUFFO0lBQ2YsSUFBSSxDQUFDQyxTQUFTLEVBQUU7RUFDcEI7RUFFSkEsU0FBU0EsQ0FBQSxFQUFHO0lBQ1IsSUFBSUMsUUFBUSxHQUFHLEVBQUU7SUFDakIsSUFBSUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxDQUFDO0lBQzdDLElBQUlDLEtBQUssR0FBRyxDQUFDLE9BQU8sRUFBQyxRQUFRLEVBQUMsU0FBUyxFQUFDLFFBQVEsQ0FBQztJQUVqRCxLQUFJLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUNBLENBQUMsR0FBR0YsTUFBTSxDQUFDRyxNQUFNLEVBQUVELENBQUMsRUFBRSxFQUFDO01BQ2pDLEtBQUksSUFBSUUsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHSCxLQUFLLENBQUNFLE1BQU0sRUFBRUMsQ0FBQyxFQUFFLEVBQUM7UUFDakMsSUFBSUMsVUFBVSxHQUFHO1VBQ2JDLElBQUksRUFBRUwsS0FBSyxDQUFDRyxDQUFDLENBQUM7VUFDZEcsS0FBSyxFQUFFUCxNQUFNLENBQUNFLENBQUM7UUFDbkIsQ0FBQztRQUNELElBQUlNLElBQUksR0FBRyxJQUFJZixJQUFJLENBQUNZLFVBQVUsQ0FBQztRQUMvQk4sUUFBUSxDQUFDVSxJQUFJLENBQUNELElBQUksQ0FBQztNQUN2QjtJQUNKO0lBQ0EsSUFBSSxDQUFDWCxLQUFLLEdBQUdFLFFBQVE7SUFDckIsT0FBTyxJQUFJO0VBQ2Y7RUFFQVcsUUFBUUEsQ0FBQSxFQUFHO0lBQ1AsTUFBTUMsTUFBTSxHQUFHLElBQUksQ0FBQ2QsS0FBSyxDQUFDTSxNQUFNO0lBQ2hDLE1BQU1TLE1BQU0sR0FBR0MsSUFBSSxDQUFDRCxNQUFNLEVBQUU7SUFDNUIsTUFBTUUsSUFBSSxHQUFHRCxJQUFJLENBQUNFLEtBQUssQ0FBQ0osTUFBTSxHQUFHQyxNQUFNLENBQUM7SUFDeEMsTUFBTUksTUFBTSxHQUFHLElBQUksQ0FBQ25CLEtBQUssQ0FBQ2lCLElBQUksQ0FBQztJQUMvQixPQUFPLElBQUksQ0FBQ2pCLEtBQUssQ0FBQ29CLE1BQU0sQ0FBQyxJQUFJLENBQUNwQixLQUFLLENBQUNxQixPQUFPLENBQUNGLE1BQU0sQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUM3RDtBQUNKOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FHLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHekIsSUFBSSIsInNvdXJjZXMiOlsid2VicGFjazovL2Nhcm5pdmFscG9rZXIvLi9zcmMvZ2FtZV9maWxlcy9kZWNrLmpzPzc5NmEiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQ2FyZCA9IHJlcXVpcmUoXCIuL2NhcmRcIilcclxuXHJcbmNsYXNzIERlY2sge1xyXG5cclxuICAgICAgICBjb25zdHJ1Y3Rvcigpe1xyXG4gICAgICAgICAgICB0aGlzLmNhcmRzID0gW107XHJcbiAgICAgICAgICAgIHRoaXMubWFrZUNhcmRzKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIG1ha2VDYXJkcygpIHtcclxuICAgICAgICBsZXQgYWxsQ2FyZHMgPSBbXTtcclxuICAgICAgICBsZXQgdmFsdWVzID0gWzIsMyw0LDUsNiw3LDgsOSwxMCwxMSwxMiwxMywxNF07XHJcbiAgICAgICAgbGV0IHN1aXRzID0gW1wiQ2x1YnNcIixcIkhlYXJ0c1wiLFwiRGlhbW9uZFwiLFwiU3BhZGVzXCJdO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGZvcihsZXQgaSA9IDA7aSA8IHZhbHVlcy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgIGZvcihsZXQgaiA9IDA7IGogPCBzdWl0cy5sZW5ndGg7IGorKyl7XHJcbiAgICAgICAgICAgICAgICBsZXQgY2FyZE9iamVjdCA9IHtcclxuICAgICAgICAgICAgICAgICAgICBzdWl0OiBzdWl0c1tqXSxcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVzW2ldLFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbGV0IGNhcmQgPSBuZXcgQ2FyZChjYXJkT2JqZWN0KTtcclxuICAgICAgICAgICAgICAgIGFsbENhcmRzLnB1c2goY2FyZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jYXJkcyA9IGFsbENhcmRzO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGRyYXdDYXJkKCkge1xyXG4gICAgICAgIGNvbnN0IHNjYWxlciA9IHRoaXMuY2FyZHMubGVuZ3RoO1xyXG4gICAgICAgIGNvbnN0IHJhbmRvbSA9IE1hdGgucmFuZG9tKCk7XHJcbiAgICAgICAgY29uc3QgcGljayA9IE1hdGguZmxvb3Ioc2NhbGVyICogcmFuZG9tKTtcclxuICAgICAgICBjb25zdCBjaG9zZW4gPSB0aGlzLmNhcmRzW3BpY2tdO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNhcmRzLnNwbGljZSh0aGlzLmNhcmRzLmluZGV4T2YoY2hvc2VuKSwxKVswXTtcclxuICAgIH1cclxufVxyXG5cclxuLy8gbGV0IGRlY2sgPSBuZXcgRGVjaygpO1xyXG4vLyBjb25zb2xlLmxvZyhkZWNrLmNhcmRzLmxlbmd0aCk7XHJcbi8vIGNvbnNvbGUubG9nKGRlY2suZHJhd0NhcmQoKSk7XHJcbi8vIGNvbnNvbGUubG9nKGRlY2suY2FyZHMubGVuZ3RoKTtcclxubW9kdWxlLmV4cG9ydHMgPSBEZWNrOyJdLCJuYW1lcyI6WyJDYXJkIiwicmVxdWlyZSIsIkRlY2siLCJjb25zdHJ1Y3RvciIsImNhcmRzIiwibWFrZUNhcmRzIiwiYWxsQ2FyZHMiLCJ2YWx1ZXMiLCJzdWl0cyIsImkiLCJsZW5ndGgiLCJqIiwiY2FyZE9iamVjdCIsInN1aXQiLCJ2YWx1ZSIsImNhcmQiLCJwdXNoIiwiZHJhd0NhcmQiLCJzY2FsZXIiLCJyYW5kb20iLCJNYXRoIiwicGljayIsImZsb29yIiwiY2hvc2VuIiwic3BsaWNlIiwiaW5kZXhPZiIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/game_files/deck.js\n");

/***/ }),

/***/ "./src/game_files/game.js":
/*!********************************!*\
  !*** ./src/game_files/game.js ***!
  \********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nconst Player = __webpack_require__(/*! ./player */ \"./src/game_files/player.js\");\nconst Deck = __webpack_require__(/*! ./deck */ \"./src/game_files/deck.js\");\nconst Util = __webpack_require__(/*! ./util */ \"./src/game_files/util.js\");\nconst Dealer = __webpack_require__(/*! ./dealer */ \"./src/game_files/dealer.js\");\nclass Game {\n  //default is 1200,800\n  // 800 - 2*120 (Trick) = 560\n\n  constructor(canvasSize) {\n    this.dealer = new Dealer({\n      pos: [canvasSize[1] * 0.36, canvasSize[1] * 0.25],\n      name: \"Dealer\",\n      color: \"#FFA500\",\n      canvasSize: canvasSize\n    });\n    this.player = new Player({\n      pos: [canvasSize[1] * 0.36, canvasSize[1] * 0.7],\n      name: \"Player\",\n      color: \"#FFA500\",\n      canvasSize: canvasSize\n    });\n    this.deck = new Deck();\n    this.canvasSize = canvasSize;\n    this.round = 1;\n    this.prep_game();\n    this.scaler = 1;\n  }\n  calcScaler() {\n    if (this.canvasSize[0] === 900) {\n      return this.scaler = 0.75;\n    } else if (this.canvasSize[0] === 1500) {\n      return this.scaler = 1.25;\n    }\n  }\n  prep_game() {\n    for (let i = 0; i < Game.START_HAND; i++) {\n      this.drawPlayer();\n    }\n    for (let i = 0; i < Game.START_HAND; i++) {\n      this.drawDealer();\n    }\n  }\n  drawPlayer() {\n    let new_card = this.deck.drawCard();\n    this.player.addCardBoard(new_card);\n  }\n  drawDealer() {\n    let new_card = this.deck.drawCard();\n    this.dealer.addCardBoard(new_card);\n  }\n  nextRound() {\n    this.round += 1;\n    this.player.gold += 3;\n    this.compareBoards();\n    // console.log(this.player.score,\"player score\");\n    // console.log(this.dealer.score,\"dealer score\");\n  }\n\n  compareBoards() {\n    // Will need refactor to compare for each trick\n    // Loop based on whichever board has the most tricks\n    // Include auto win if mismatch on trick count\n\n    let dealer_scores = this.dealer.evaluateBoard();\n    // console.log(dealer_scores,\"Dealer Scores\")\n    let player_scores = this.player.evaluateBoard();\n    // console.log(player_scores,\"Player Scores\")\n    let min = dealer_scores.length < player_scores.length ? dealer_scores.length : player_scores.length;\n    // console.log(min,\"min\");\n    let playerroundscore = 0;\n    let dealerroundscore = 0;\n    for (let i = 0; i < min; i++) {\n      if (dealer_scores[i] > player_scores[i]) {\n        let scoreobj = document.getElementById(`score${i + 1}`);\n        scoreobj.innerText = 0;\n        dealerroundscore += 1;\n        // console.log(\"Dealer Wins 1\")\n      } else if (dealer_scores[i] < player_scores[i]) {\n        let scoreobj = document.getElementById(`score${i + 1}`);\n        scoreobj.innerText = 1;\n        playerroundscore += 1;\n        // console.log(\"Player Wins 1\")\n      } else if (dealer_scores[i] === player_scores[i]) {\n        // console.log(\"Tie\");\n        let scoreobj = document.getElementById(`score${i + 1}`);\n        scoreobj.innerText = \"\";\n      }\n    }\n    this.player.score += playerroundscore;\n    this.dealer.score += dealerroundscore;\n    // console.log([this.player.score,this.dealer.score],\"Score after round\");\n    let playerscorehtml = document.getElementById(`playerscore`);\n    let dealerscorehtml = document.getElementById(`dealerscore`);\n    playerscorehtml.innerText = `Round Score     ${playerroundscore}`;\n    dealerscorehtml.innerText = `Round Score     ${dealerroundscore}`;\n  }\n  animate(ctx) {\n    this.calcScaler();\n    console.log(`${40 * this.scaler}px Arial`);\n    ctx.font = `${40 * this.scaler}px Arial`;\n    ctx.fillStyle = \"#FFFFFF\";\n    ctx.clearRect(725 / 1200 * this.canvasSize[0], 0, 300, 150 / 800 * this.canvasSize[1]);\n    ctx.fillText(`Round: ${this.round}`, 725 / 1200 * this.canvasSize[0], 190 / 800 * this.canvasSize[1]);\n    ctx.onload = () => {\n      this.calcScaler();\n      ctx.clearRect(725 / 1200 * this.canvasSize[0], 0, 300, 150 / 800 * this.canvasSize[1]);\n      ctx.fillText(`Dealer Hands`, 725 / 1200 * this.canvasSize[0], 190 / 800 * this.canvasSize[1]);\n    };\n  }\n  resetBoard() {}\n  winner() {\n    let playerscore = this.player.score;\n    let dealerscore = this.dealer.score;\n    let result = [playerscore, dealerscore];\n    if (playerscore > dealerscore) {\n      result.push(\"Player Wins!\");\n    } else {\n      result.push(\"Dealer Wins!\");\n    }\n    return result;\n  }\n}\n// const g = new Game();\n// g.play();\n_defineProperty(Game, \"START_HAND\", 7);\n_defineProperty(Game, \"MAXROUNDS\", 11);\nmodule.exports = Game;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/game_files/game.js\n");

/***/ }),

/***/ "./src/game_files/player.js":
/*!**********************************!*\
  !*** ./src/game_files/player.js ***!
  \**********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nconst Card = __webpack_require__(/*! ./card */ \"./src/game_files/card.js\");\nconst Trick = __webpack_require__(/*! ./trick */ \"./src/game_files/trick.js\");\nconst Util = __webpack_require__(/*! ./util */ \"./src/game_files/util.js\");\nclass Player {\n  constructor(object) {\n    this.canvasSize = object.canvasSize;\n    this.DIM_X = this.pos = object.pos;\n    this.name = object.name;\n    this.score = 0;\n    this.gold = 0;\n    this.color = object.color;\n    //Probably want an array of trick pos.\n    //Probably want to prefill each board with 4 tricks, 3 of which are empty.\n    this.tricks = [];\n    this.activeTricks = 2;\n    this.makeTricks();\n    this.scaler = 1;\n    this.calcScaler();\n  }\n  calcScaler() {\n    if (this.canvasSize[0] === 900) {\n      return this.scaler = 0.75;\n    } else if (this.canvasSize[0] === 1500) {\n      return this.scaler = 1.25;\n    }\n  }\n  addCardBoard(card) {\n    for (let i = 0; i < this.tricks.length; i++) {\n      if (this.tricks[i].addCard(card)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  activateNextTrick() {\n    for (let i = 0; i < this.tricks.length; i++) {\n      let trick = this.tricks[i];\n      if (trick.active === false) {\n        trick.active = true;\n        this.activeTricks += 1;\n        break;\n      }\n    }\n  }\n  makeTricks() {\n    let trickArray = [];\n    let tempPos = this.pos;\n    let trick1 = new Trick({\n      pos: this.pos,\n      color: \"#FFA500\",\n      trickid: 1,\n      active: true\n    });\n    trickArray.push(trick1);\n    let trick2 = new Trick({\n      pos: [this.pos[0] + Trick.WIDTH, this.pos[1]],\n      color: \"#00CC33\",\n      trickid: 2,\n      active: true\n    });\n    trickArray.push(trick2);\n    let trick3 = new Trick({\n      pos: [this.pos[0], this.pos[1] + Trick.HEIGHT],\n      color: \"#800080\",\n      trickid: 3,\n      active: false\n    });\n    trickArray.push(trick3);\n    let trick4 = new Trick({\n      pos: [this.pos[0] + Trick.WIDTH, this.pos[1] + Trick.HEIGHT],\n      color: \"#0099FF\",\n      trickid: 4,\n      active: false\n    });\n    trickArray.push(trick4);\n    this.tricks = trickArray;\n  }\n  animate(ctx) {\n    // ctx.clearRect(0,0,900,200)\n    ctx.fillStyle = this.color;\n    this.tricks.forEach(trick => {\n      trick.animate(ctx, this.name);\n    });\n    this.animateGold(ctx);\n  }\n  evaluateBoard() {\n    let scores = [];\n    for (let i = 0; i < this.tricks.length; i++) {\n      let trick = this.tricks[i];\n      trick.evaluatePoker();\n      let value = trick.value || 0;\n      scores.push(value);\n    }\n    return scores;\n  }\n  animateGold(ctx) {\n    // Might move this to the game class\n    if (this.name === \"Player\") {\n      ctx.fillStyle = \"#003399\";\n      ctx.fillRect(980 / 1200 * this.canvasSize[0], 370 / 800 * this.canvasSize[1], 130 * this.scaler, 260 * this.scaler);\n      ctx.lineWidth = 3;\n      ctx.strokeStyle = \"#FFFFFF\";\n      ctx.strokeRect(980 / 1200 * this.canvasSize[0], 370 / 800 * this.canvasSize[1], 130 * this.scaler, 260 * this.scaler);\n      ctx.font = `${30 * this.scaler}px Arial`;\n      ctx.fillStyle = \"#FFFFFF\";\n      ctx.fillText(`Gold: ${this.gold}`, 995 / 1200 * this.canvasSize[0], 400 / 800 * this.canvasSize[1]);\n      // Button for new card\n      const cardback = new Image();\n      cardback.src = \"images/Cards/Medium/BackRed1.png\";\n      ctx.drawImage(cardback, 1020 / 1200 * this.canvasSize[0], 405 / 800 * this.canvasSize[1], Card.CARDWIDTH, Card.CARDHEIGHT);\n      ctx.font = `${20 * this.scaler}px Arial`;\n      ctx.fillStyle = \"#FFFFFF\";\n      ctx.fillText(`New Card`, 995 / 1200 * this.canvasSize[0], 507 / 800 * this.canvasSize[1]);\n      ctx.fillText(`2`, 1090 / 1200 * this.canvasSize[0], 507 / 800 * this.canvasSize[1]);\n      /// Five in a row for the new hand\n      ctx.drawImage(cardback, 995 / 1200 * this.canvasSize[0], 515 / 800 * this.canvasSize[1], Card.CARDWIDTH, Card.CARDHEIGHT);\n      ctx.drawImage(cardback, 1001 / 1200 * this.canvasSize[0], 515 / 800 * this.canvasSize[1], Card.CARDWIDTH, Card.CARDHEIGHT);\n      ctx.drawImage(cardback, 1007 / 1200 * this.canvasSize[0], 515 / 800 * this.canvasSize[1], Card.CARDWIDTH, Card.CARDHEIGHT);\n      ctx.drawImage(cardback, 1013 / 1200 * this.canvasSize[0], 515 / 800 * this.canvasSize[1], Card.CARDWIDTH, Card.CARDHEIGHT);\n      ctx.drawImage(cardback, 1019 / 1200 * this.canvasSize[0], 515 / 800 * this.canvasSize[1], Card.CARDWIDTH, Card.CARDHEIGHT);\n      ctx.font = `${20 * this.scaler}px Arial`;\n      ctx.fillStyle = \"#FFFFFF\";\n      ctx.fillText(`New Hand`, 995 / 1200 * this.canvasSize[0], 620 / 800 * this.canvasSize[1]);\n      ctx.fillText(`6`, 1092 / 1200 * this.canvasSize[0], 620 / 800 * this.canvasSize[1]);\n      //This is a box 1020 to 1100 or 80 by 80\n      //The points are [1020,100],[1100,100],[1020,180],[1100,180]\n      cardback.onload = () => {\n        ctx.drawImage(cardback, 1020 / 1200 * this.canvasSize[0], 405 / 800 * this.canvasSize[1], Card.CARDWIDTH, Card.CARDHEIGHT);\n        ctx.drawImage(cardback, 995 / 1200 * this.canvasSize[0], 515 / 800 * this.canvasSize[1], Card.CARDWIDTH, Card.CARDHEIGHT);\n        ctx.drawImage(cardback, 1001 / 1200 * this.canvasSize[0], 515 / 800 * this.canvasSize[1], Card.CARDWIDTH, Card.CARDHEIGHT);\n        ctx.drawImage(cardback, 1007 / 1200 * this.canvasSize[0], 515 / 800 * this.canvasSize[1], Card.CARDWIDTH, Card.CARDHEIGHT);\n        ctx.drawImage(cardback, 1013 / 1200 * this.canvasSize[0], 515 / 800 * this.canvasSize[1], Card.CARDWIDTH, Card.CARDHEIGHT);\n        ctx.drawImage(cardback, 1019 / 1200 * this.canvasSize[0], 515 / 800 * this.canvasSize[1], Card.CARDWIDTH, Card.CARDHEIGHT);\n      };\n    }\n  }\n}\n_defineProperty(Player, \"DIM_X\", Trick.WIDTH * 2);\n_defineProperty(Player, \"DIM_Y\", Trick.HEIGHT * 2);\nmodule.exports = Player;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/game_files/player.js\n");

/***/ }),

/***/ "./src/game_files/trick.js":
/*!*********************************!*\
  !*** ./src/game_files/trick.js ***!
  \*********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nconst Player = __webpack_require__(/*! ./player */ \"./src/game_files/player.js\");\nconst Card = __webpack_require__(/*! ./card */ \"./src/game_files/card.js\");\nconst Util = __webpack_require__(/*! ./util */ \"./src/game_files/util.js\");\nclass Trick {\n  constructor(object) {\n    this.pos = object.pos;\n    this.cards = [];\n    this.value = 0;\n    this.values = [];\n    this.trait = \"High Card\";\n    this.major = 0;\n    this.color = object.color;\n    this.trickid = object.trickid;\n    this.active = object.active;\n    this.points = [];\n    this.updatePoints();\n    this.scaler = 1;\n    this.calcScaler();\n  }\n  calcScaler() {\n    if (this.canvasSize === \"Small\") {\n      return this.scaler = 0.75;\n    } else if (this.canvasSize === \"Large\") {\n      return this.scaler = 1.25;\n    }\n  }\n  updatePoints(pos) {\n    this.pos = pos || this.pos;\n    this.points = [{\n      x: this.pos[0],\n      y: this.pos[1]\n    }, {\n      x: this.pos[0] + Trick.WIDTH,\n      y: this.pos[1]\n    }, {\n      x: this.pos[0] + Trick.WIDTH,\n      y: this.pos[1] + Trick.HEIGHT\n    }, {\n      x: this.pos[0],\n      y: this.pos[1] + Trick.HEIGHT\n    }];\n  }\n  evaluate() {\n    let sum = 0;\n    this.cards.forEach(card => {\n      sum += card.value;\n    });\n    return sum;\n  }\n  evaluatePoker() {\n    let sorted = Util.sortCards(this.cards);\n    this.cards = sorted;\n    this.value = 0;\n    this.major = 0;\n    let values = [];\n    this.trait = \"High Card\";\n    let traitList = [\"High Card\", \"One Pair\", \"Two Pair\", \"Three of a Kind\", \"Straight\", \"Flush\", \"Full House\", \"Four of a Kind\", \"Straight-Flush\"];\n    let suits = [\"Clubs\", \"Hearts\", \"Diamond\", \"Spades\"];\n    let base = 14;\n    for (let i = 0; i < this.cards.length; i++) {\n      values.push(this.cards[i].value);\n    }\n    this.values = values;\n    if (this.cards.length === 5) {\n      // Check flush\n      let flushCheck = false;\n      let straightCheck = true;\n      for (let i = 0; i < suits.length; i++) {\n        let suit = suits[i];\n        if (this.cards.every(card => card.suit === suit)) {\n          flushCheck = true;\n        }\n      }\n      // Check straight\n      for (let i = 0; i < values.length - 1; i++) {\n        if (values[i] !== values[i + 1] + 1) {\n          // console.log(values,\"straigh check\");\n          // console.log([values[i],values[i+1]],\"straight check\");\n          straightCheck = false;\n        }\n      }\n      if (flushCheck && straightCheck) {\n        this.trait = \"Straight-Flush\";\n      } else if (flushCheck) {\n        this.trait = \"Flush\";\n      } else if (straightCheck) {\n        this.trait = \"Straight\";\n      }\n    }\n    let hash = {};\n    for (let i = 0; i < values.length; i++) {\n      if (hash[values[i]] === undefined) {\n        hash[values[i]] = 1;\n      } else {\n        hash[values[i]] += 1;\n      }\n    }\n    let pair = false;\n    let trips = false;\n    for (let i = 0; i < values.length; i++) {\n      if (hash[values[i]] === 4) {\n        this.trait = \"Four of a Kind\";\n        this.major = values[i];\n      }\n      if (hash[values[i]] === 2 && pair === false) {\n        pair = true;\n        this.trait = \"One Pair\";\n        this.major = values[i];\n      } else if (hash[values[i]] === 2 && pair === true && values[i] !== values[i - 1]) {\n        this.trait = \"Two Pair\";\n        this.major = values[i] > this.major ? values[i] : this.major;\n      } else if (hash[values[i]] === 3) {\n        trips = true;\n        this.trait = \"Three of a Kind\";\n        this.major = values[i];\n      }\n    }\n    if (trips && pair) {\n      this.trait = \"Full House\";\n    }\n    this.major = this.major || values[0];\n    let rank = traitList.indexOf(this.trait) + 1;\n    let tiebreaks = values.filter(num => num !== this.major);\n    let majorSum = this.major * base ** rank * 2;\n    let tiebreakSum = 0;\n    for (let i = 1; i < tiebreaks.length + 1; i++) {\n      tiebreakSum += tiebreaks[i - 1] * base ** rank / base ** i;\n    }\n    this.value = majorSum + tiebreakSum;\n    return this.value;\n  }\n  removeCard(card) {\n    let index = this.cards.indexOf(card);\n    return this.cards.splice(index, 1)[0];\n  }\n  addCard(card) {\n    // Need to refactor this to check if the trick has 5 cards\n    let count = this.cards.length;\n    if (count < Trick.MAXCARDS && this.active) {\n      let pos = this.pos;\n      pos = [pos[0] + Trick.XBUFFER, pos[1] + Trick.YBUFFER];\n      let xshift = count * Card.CARDWIDTH + count * 3;\n      pos = [pos[0] + xshift, pos[1]];\n      card.pos = pos;\n      card.trickid = this.trickid;\n      card.updatePoints();\n      this.cards.push(card);\n      return true;\n    } else {\n      return false;\n    }\n  }\n  updateCards() {\n    let count = this.cards.length;\n    for (let i = 0; i < count; i++) {\n      let card = this.cards[i];\n      let pos = this.pos;\n      pos = [pos[0] + Trick.XBUFFER, pos[1] + Trick.YBUFFER];\n      let xshift = i * Card.CARDWIDTH + i * 3;\n      pos = [pos[0] + xshift, pos[1]];\n      card.pos = pos;\n      card.updatePoints();\n    }\n  }\n  animate(ctx, name) {\n    let fontArray = [16, 22, 30];\n    const fontSize = Trick.canvasSize === \"Small\" ? fontArray[0] : Trick.canvasSize === \"Large\" ? fontArray[2] : fontArray[1];\n    if (this.active) {\n      const trickobj = document.getElementById(`trick${this.trickid}`);\n      trickobj.style.display = \"flex\";\n      trickobj.style.backgroundColor = this.color;\n      let sorted = Util.sortCards(this.cards);\n      this.cards = sorted;\n      this.updateCards();\n      this.evaluatePoker();\n      ctx.fillStyle = this.color;\n      let trickX = this.pos[0];\n      let trickY = this.pos[1];\n      ctx.fillRect(trickX, trickY, Trick.WIDTH, Trick.HEIGHT);\n      ctx.fillStyle = \"#FFFFFF\";\n      ctx.font = `${fontSize}px Arial`;\n      ctx.fillText(`${this.trait}`, trickX + Trick.WIDTH * 0.33, trickY + Trick.HEIGHT * 0.95);\n      for (let i = 0; i < this.cards.length; i++) {\n        let currentCard = this.cards[i];\n        currentCard.animate(ctx, currentCard.pos);\n        let cardobj = document.getElementById(`${this.trickid}-${i}`);\n        cardobj.src = currentCard.sprite.src;\n      }\n      ctx.lineWidth = 3;\n      ctx.strokeStyle = \"#FFFFFF\";\n      ctx.strokeRect(this.pos[0], this.pos[1], Trick.WIDTH, Trick.HEIGHT);\n    } else {\n      ctx.fillStyle = this.color;\n      let trickX = this.pos[0];\n      let trickY = this.pos[1];\n      ctx.fillRect(trickX, trickY, Trick.WIDTH, Trick.HEIGHT);\n      ctx.fillStyle = \"#FFFFFF\";\n      ctx.font = `${fontSize}px Arial`;\n      if (name === \"Player\") {\n        console.log(fontSize, \"fontSize\");\n        ctx.fillText(`Unlock Hand: 6 Gold!`, trickX + Trick.WIDTH * 0.2 * this.scaler, trickY + Trick.HEIGHT * 0.5);\n      } else {\n        ctx.fillStyle = \"#FFFFFF\";\n        ctx.fillText(`Inactive Hand`, trickX + Trick.WIDTH * 0.3 * this.scaler, trickY + Trick.HEIGHT * 0.5);\n      }\n      ctx.lineWidth = 3;\n      ctx.strokeStyle = \"#FFFFFF\";\n      ctx.strokeRect(this.pos[0], this.pos[1], Trick.WIDTH, Trick.HEIGHT);\n    }\n  }\n}\n\n// let t = new Trick({pos: [0,0]});\n// t.addCard(\"A\");\n// console.log(t,\"t\");\n_defineProperty(Trick, \"TRICKDIMENSIONS\", [[233, 90], [310, 120], [388, 150]]);\n_defineProperty(Trick, \"canvasSize\", Util.canvasSize().size);\n_defineProperty(Trick, \"WIDTH\", Trick.canvasSize === \"Large\" ? Trick.TRICKDIMENSIONS[2][0] : Trick.canvasSize === \"Medium\" ? Trick.TRICKDIMENSIONS[1][0] : Trick.TRICKDIMENSIONS[0][0]);\n_defineProperty(Trick, \"HEIGHT\", Trick.canvasSize === \"Large\" ? Trick.TRICKDIMENSIONS[2][1] : Trick.canvasSize === \"Medium\" ? Trick.TRICKDIMENSIONS[1][1] : Trick.TRICKDIMENSIONS[0][1]);\n_defineProperty(Trick, \"YBUFFER\", Trick.HEIGHT * 0.09);\n_defineProperty(Trick, \"XBUFFER\", Trick.HEIGHT * 0.09);\n_defineProperty(Trick, \"MAXCARDS\", 5);\nmodule.exports = Trick;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/game_files/trick.js\n");

/***/ }),

/***/ "./src/game_files/util.js":
/*!********************************!*\
  !*** ./src/game_files/util.js ***!
  \********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"canvasSize\": function() { return /* binding */ canvasSize; },\n/* harmony export */   \"createPoints\": function() { return /* binding */ createPoints; },\n/* harmony export */   \"sortCards\": function() { return /* binding */ sortCards; }\n/* harmony export */ });\nfunction sortCards(array) {\n  function sorter(card1, card2) {\n    //Return 1 if card 1 > card 2\n    //Return -1 if card 1 < card 2\n    const suits = [\"Spades\", \"Hearts\", \"Diamond\", \"Clubs\"];\n    if (card1.value > card2.value) {\n      return 1;\n    } else if (card1.value < card2.value) {\n      return -1;\n    } else {\n      if (suits.indexOf(card1.suit) < suits.indexOf(card2.suit)) {\n        return 1;\n      } else {\n        return -1;\n      }\n    }\n  }\n  let pivot = array[0];\n  if (array.length < 2) return array;\n  let left = array.slice(1).filter(ele => sorter(pivot, ele) === -1);\n  let right = array.slice(1).filter(ele => sorter(pivot, ele) === 1);\n  let leftSorted = sortCards(left);\n  let rightSorted = sortCards(right);\n  return leftSorted.concat([pivot]).concat(rightSorted);\n}\nfunction createPoints(pos, box) {\n  const points = [{\n    x: pos[0],\n    y: pos[1]\n  }, {\n    x: pos[0] + box[0],\n    y: pos[1]\n  }, {\n    x: pos[0] + box[0],\n    y: pos[1] + box[1]\n  }, {\n    x: pos[0],\n    y: pos[1] + box[1]\n  }];\n  return points;\n}\nfunction canvasSize() {\n  const windowWidth = window.innerWidth;\n  const windowHeight = window.innerHeight;\n  const canvasDimensions = [[900, 600], [1200, 800], [1500, 1000]];\n  let canvasSize = canvasDimensions[0];\n  if (windowWidth > canvasDimensions[2][0] + 200 && windowHeight > canvasDimensions[2][1] + 200) {\n    canvasSize = canvasDimensions[2];\n    return {\n      canvasSize: canvasSize,\n      size: \"Large\"\n    };\n  } else if (windowWidth > canvasDimensions[1][0] + 200 && windowHeight > canvasDimensions[1][1] + 200) {\n    canvasSize = canvasDimensions[1];\n    return {\n      canvasSize: canvasSize,\n      size: \"Medium\"\n    };\n  } else {\n    canvasSize = canvasDimensions[0];\n    return {\n      canvasSize: canvasSize,\n      size: \"Small\"\n    };\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RUFBQyxDQUFDLElBQUksRUFBQyxHQUFHLENBQUMsRUFBQyxDQUFDLElBQUksRUFBQyxJQUFJLENBQUMsQ0FBQztFQUMzRCxJQUFJTixVQUFVLEdBQUdNLGdCQUFnQixDQUFDLENBQUMsQ0FBQztFQUNwQyxJQUFJTCxXQUFXLEdBQUdLLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLEdBQUksSUFBS0YsWUFBWSxHQUFHRSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxHQUFJLEVBQUM7SUFDekZOLFVBQVUsR0FBR00sZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO0lBQ2hDLE9BQU87TUFBQ04sVUFBVSxFQUFFQSxVQUFVO01BQUVPLElBQUksRUFBRTtJQUFPLENBQUM7RUFDbEQsQ0FBQyxNQUFNLElBQUdOLFdBQVcsR0FBRUssZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsR0FBSSxJQUFLRixZQUFZLEdBQUVFLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLEdBQUssRUFBQztJQUM5Rk4sVUFBVSxHQUFHTSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7SUFDaEMsT0FBTztNQUFDTixVQUFVLEVBQUVBLFVBQVU7TUFBRU8sSUFBSSxFQUFFO0lBQVEsQ0FBQztFQUNuRCxDQUFDLE1BQUs7SUFDRlAsVUFBVSxHQUFHTSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7SUFDaEMsT0FBTztNQUFDTixVQUFVLEVBQUVBLFVBQVU7TUFBRU8sSUFBSSxFQUFFO0lBQU8sQ0FBQztFQUNsRDtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2Fybml2YWxwb2tlci8uL3NyYy9nYW1lX2ZpbGVzL3V0aWwuanM/YWRiMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcclxuZXhwb3J0IGZ1bmN0aW9uIHNvcnRDYXJkcyhhcnJheSl7XHJcbiAgICAgICAgZnVuY3Rpb24gc29ydGVyKGNhcmQxLGNhcmQyKXtcclxuICAgICAgICAgICAgLy9SZXR1cm4gMSBpZiBjYXJkIDEgPiBjYXJkIDJcclxuICAgICAgICAgICAgLy9SZXR1cm4gLTEgaWYgY2FyZCAxIDwgY2FyZCAyXHJcbiAgICAgICAgICAgIGNvbnN0IHN1aXRzID0gW1wiU3BhZGVzXCIsXCJIZWFydHNcIixcIkRpYW1vbmRcIixcIkNsdWJzXCJdXHJcbiAgICAgICAgICAgIGlmKGNhcmQxLnZhbHVlPmNhcmQyLnZhbHVlKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiAxXHJcbiAgICAgICAgICAgIH1lbHNlIGlmKGNhcmQxLnZhbHVlPGNhcmQyLnZhbHVlKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiAtMSBcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICBpZihzdWl0cy5pbmRleE9mKGNhcmQxLnN1aXQpPHN1aXRzLmluZGV4T2YoY2FyZDIuc3VpdCkpe1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAxXHJcbiAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTEgXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHBpdm90ID0gYXJyYXlbMF07XHJcbiAgICAgICAgaWYoYXJyYXkubGVuZ3RoIDwgMikgcmV0dXJuIGFycmF5O1xyXG4gICAgICAgIGxldCBsZWZ0ID0gYXJyYXkuc2xpY2UoMSkuZmlsdGVyKChlbGUpID0+IHNvcnRlcihwaXZvdCxlbGUpID09PSAtMSk7XHJcbiAgICAgICAgbGV0IHJpZ2h0ID0gYXJyYXkuc2xpY2UoMSkuZmlsdGVyKChlbGUpID0+IHNvcnRlcihwaXZvdCxlbGUpID09PSAxKTtcclxuICAgICAgICBsZXQgbGVmdFNvcnRlZCA9IHNvcnRDYXJkcyhsZWZ0KTtcclxuICAgICAgICBsZXQgcmlnaHRTb3J0ZWQgPSBzb3J0Q2FyZHMocmlnaHQpO1xyXG4gICAgICAgIHJldHVybiBsZWZ0U29ydGVkLmNvbmNhdChbcGl2b3RdKS5jb25jYXQocmlnaHRTb3J0ZWQpO1xyXG4gICAgfVxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUG9pbnRzKHBvcyxib3gpe1xyXG4gICAgICAgIGNvbnN0IHBvaW50cyA9W3tcclxuICAgICAgICAgICAgeDogcG9zWzBdLFxyXG4gICAgICAgICAgICB5OiBwb3NbMV1cclxuICAgICAgICB9LHtcclxuICAgICAgICAgICAgeDogcG9zWzBdK2JveFswXSxcclxuICAgICAgICAgICAgeTogcG9zWzFdXHJcbiAgICAgICAgfSx7XHJcbiAgICAgICAgICAgIHg6IHBvc1swXStib3hbMF0sXHJcbiAgICAgICAgICAgIHk6IHBvc1sxXStib3hbMV1cclxuICAgICAgICB9LHtcclxuICAgICAgICAgICAgeDogcG9zWzBdLFxyXG4gICAgICAgICAgICB5OiBwb3NbMV0rYm94WzFdXHJcbiAgICAgICAgfVxyXG4gICAgXTtcclxuICAgIHJldHVybiBwb2ludHM7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjYW52YXNTaXplKCkge1xyXG4gICAgY29uc3Qgd2luZG93V2lkdGg9IHdpbmRvdy5pbm5lcldpZHRoO1xyXG4gICAgY29uc3Qgd2luZG93SGVpZ2h0PSB3aW5kb3cuaW5uZXJIZWlnaHQ7XHJcbiAgICBjb25zdCBjYW52YXNEaW1lbnNpb25zID0gW1s5MDAsNjAwXSxbMTIwMCw4MDBdLFsxNTAwLDEwMDBdXVxyXG4gICAgbGV0IGNhbnZhc1NpemUgPSBjYW52YXNEaW1lbnNpb25zWzBdO1xyXG4gICAgaWYoKHdpbmRvd1dpZHRoKT4oY2FudmFzRGltZW5zaW9uc1syXVswXSsyMDApICYmICh3aW5kb3dIZWlnaHQpPihjYW52YXNEaW1lbnNpb25zWzJdWzFdKzIwMCkpe1xyXG4gICAgICAgIGNhbnZhc1NpemUgPSBjYW52YXNEaW1lbnNpb25zWzJdO1xyXG4gICAgICAgIHJldHVybiB7Y2FudmFzU2l6ZTogY2FudmFzU2l6ZSwgc2l6ZTogXCJMYXJnZVwifVxyXG4gICAgfSBlbHNlIGlmKHdpbmRvd1dpZHRoPihjYW52YXNEaW1lbnNpb25zWzFdWzBdKzIwMCkgJiYgKHdpbmRvd0hlaWdodD4oY2FudmFzRGltZW5zaW9uc1sxXVsxXSsyMDApKSl7XHJcbiAgICAgICAgY2FudmFzU2l6ZSA9IGNhbnZhc0RpbWVuc2lvbnNbMV07XHJcbiAgICAgICAgcmV0dXJuIHtjYW52YXNTaXplOiBjYW52YXNTaXplLCBzaXplOiBcIk1lZGl1bVwifVxyXG4gICAgfWVsc2Uge1xyXG4gICAgICAgIGNhbnZhc1NpemUgPSBjYW52YXNEaW1lbnNpb25zWzBdO1xyXG4gICAgICAgIHJldHVybiB7Y2FudmFzU2l6ZTogY2FudmFzU2l6ZSwgc2l6ZTogXCJTbWFsbFwifVxyXG4gICAgfVxyXG59Il0sIm5hbWVzIjpbInNvcnRDYXJkcyIsImFycmF5Iiwic29ydGVyIiwiY2FyZDEiLCJjYXJkMiIsInN1aXRzIiwidmFsdWUiLCJpbmRleE9mIiwic3VpdCIsInBpdm90IiwibGVuZ3RoIiwibGVmdCIsInNsaWNlIiwiZmlsdGVyIiwiZWxlIiwicmlnaHQiLCJsZWZ0U29ydGVkIiwicmlnaHRTb3J0ZWQiLCJjb25jYXQiLCJjcmVhdGVQb2ludHMiLCJwb3MiLCJib3giLCJwb2ludHMiLCJ4IiwieSIsImNhbnZhc1NpemUiLCJ3aW5kb3dXaWR0aCIsIndpbmRvdyIsImlubmVyV2lkdGgiLCJ3aW5kb3dIZWlnaHQiLCJpbm5lckhlaWdodCIsImNhbnZhc0RpbWVuc2lvbnMiLCJzaXplIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/game_files/util.js\n");

/***/ }),

/***/ "./src/game_files/view_game.js":
/*!*************************************!*\
  !*** ./src/game_files/view_game.js ***!
  \*************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("const Util = __webpack_require__(/*! ./util */ \"./src/game_files/util.js\");\nconst Game = __webpack_require__(/*! ./game */ \"./src/game_files/game.js\");\nconst Card = __webpack_require__(/*! ./card */ \"./src/game_files/card.js\");\nconst Trick = __webpack_require__(/*! ./trick */ \"./src/game_files/trick.js\");\nclass ViewGame {\n  constructor(game, ctx, pos, canvasSize) {\n    this.canvasSize = canvasSize;\n    this.game = game;\n    this.gameCtx = ctx;\n    this.allCards = [];\n    this.allTricks = [];\n    this.setupScreen();\n    this.buildTricksCards();\n    this.bindCanvas();\n    this.cardSelected = false;\n    this.pos = pos;\n    this.scaler = 1;\n    this.calcScaler();\n    console.log(this.scaler, \"this.scaler\");\n  }\n  calcScaler() {\n    if (this.canvasSize[0] === 900) {\n      return this.scaler = 0.75;\n    } else if (this.canvasSize[0] === 1500) {\n      return this.scaler = 1.25;\n    }\n  }\n  resetCardLinks() {\n    let tricksidx = [1, 2, 3, 4, 5, 6, 7, 8];\n    let cardsidx = [0, 1, 2, 3, 4];\n    for (let i = 1; i < tricksidx.length; i++) {\n      for (let j = 0; j < cardsidx.length; j++) {\n        let cardobj = document.getElementById(`${i}-${j}`);\n        cardobj.src = \"./images/transparent.png\";\n      }\n    }\n  }\n  buildTricksCards() {\n    // 2D array, first item is the shape array. second item is the card.\n    // Loop through player tricks and build each card. \n    let tricks = this.game.player.tricks;\n    let allCards = [];\n    let allTricks = [];\n    // console.log(tricks,\"player tricks\");\n    for (let i = 0; i < tricks.length; i++) {\n      let trick = tricks[i];\n      allTricks.push(trick);\n      // console.log(trick,\"a grabbed trick\");\n      for (let j = 0; j < trick.cards.length; j++) {\n        let card = trick.cards[j];\n        // console.log(card,\"a grabbed card\");\n        allCards.push(card);\n      }\n    }\n    this.allCards = allCards;\n    this.allTricks = allTricks;\n  }\n  tracePath(object, ctx) {\n    let points = object.points;\n    ctx.beginPath();\n    ctx.moveTo(points[0].x, points[0].y);\n    for (let i = 1; i < points.length; i++) {\n      ctx.lineTo(points[i].x, points[i].y);\n    }\n  }\n  bindCanvas() {\n    let canvas = document.getElementById(\"game\");\n    // console.log(canvas,\"canvasgrabbed\");\n    canvas.addEventListener('click', this.handleCanvasClick.bind(this));\n  }\n  // bindDealer(){\n  //     let canvas = document.getElementById(\"game\");\n  //     // console.log(canvas,\"canvasgrabbed\");\n  //     canvas.addEventListener('click',this.handleDealerCanvasClick.bind(this))\n  // }\n  // handleDealerCanvasClick(e) {\n  //     e.preventDefault();\n  //     console.log(\"Click detected\")\n\n  //     let xOffset = this.pos[0];\n  //     let yOffset = this.pos[1];\n  //     let mouseX = parseInt(e.clientX - xOffset);\n  //     let mouseY = parseInt(e.clientY - yOffset);\n  //     console.log([e.clientX,e.clientY],\"Event Mouse Click Array\")\n  //     console.log([mouseX,mouseY],\"Mouse Click Pos After Offsets\")\n  //     const newScoreRoundButton = [[1000,345],[160,80]];\n  //     const newScoreRoundButtonPoints = Util.createPoints(newScoreRoundButton[0],newScoreRoundButton[1]);\n  //     let points = {points: newScoreRoundButtonPoints}\n  //     this.tracePath(points,this.gameCtx)\n  //     if(this.gameCtx.isPointInPath(mouseX,mouseY)){\n  //         console.log(\"Click on Score Round\");\n  //         this.playRound();\n  //     }\n\n  // }\n\n  handleCanvasClick(e) {\n    // e.preventDefault();\n    // console.log(\"Click detected\")\n    // console.log(this.cardSelected,\"Card Selected?\")\n    let xOffset = this.pos[0];\n    let yOffset = this.pos[1];\n    let mouseX = parseInt(e.clientX - xOffset);\n    let mouseY = parseInt(e.clientY - yOffset);\n    console.log([e.clientX, e.clientY], \"Event Mouse Click Array\");\n    console.log([mouseX, mouseY], \"Mouse Click Pos After Offsets\");\n    // console.log([this.allCards.length],\"Card Array Length\");\n    // console.log([this.allTricks.length],\"Trick Array Length\");\n    // see if a card has been clicked on\n    if (this.cardSelected === false) {\n      for (let i = 0; i < this.allCards.length; i++) {\n        let card = this.allCards[i];\n        // console.log(card.pos,\"Card Pos\");\n        this.tracePath(card, this.gameCtx);\n        if (this.gameCtx.isPointInPath(mouseX, mouseY)) {\n          this.cardSelected = card;\n          card.selected = true;\n          // console.log(card,\"grabbed card\");\n          this.game.player.animate(this.gameCtx);\n          this.buildTricksCards();\n          break;\n        }\n      }\n    } else if (this.cardSelected) {\n      for (let i = 0; i < this.allTricks.length; i++) {\n        let trick = this.allTricks[i];\n        // console.log(trick.pos,\"Trick Pos\");\n        this.tracePath(trick, this.gameCtx);\n        if (this.gameCtx.isPointInPath(mouseX, mouseY)) {\n          // console.log(trick,\"grabbed trick\");\n          this.moveCard(this.cardSelected, trick);\n          this.game.player.animate(this.gameCtx);\n          this.buildTricksCards();\n        }\n      }\n    }\n    const newTrickButton = [[995 / 1200 * this.canvasSize[0], 515 / 800 * this.canvasSize[1]], [Card.CARDWIDTH + Card.CARDWIDTH * 0.25, Card.CARDHEIGHT]];\n    const newCardButton = [[1020 / 1200 * this.canvasSize[0], 405 / 800 * this.canvasSize[1]], [Card.CARDWIDTH, Card.CARDHEIGHT]];\n    const newTrickButtonPoints = Util.createPoints(newTrickButton[0], newTrickButton[1]);\n    const newCardButtonPoints = Util.createPoints(newCardButton[0], newCardButton[1]);\n    // Eventually need to error handle if there isnt enough gold\n    if (this.game.player.gold >= 6) {\n      let points = {\n        points: newTrickButtonPoints\n      };\n      this.tracePath(points, this.gameCtx);\n      if (this.gameCtx.isPointInPath(mouseX, mouseY)) {\n        console.log(\"Clicked on Trick Button\");\n        this.game.player.activateNextTrick();\n        this.game.player.gold -= 6;\n        this.game.player.animate(this.gameCtx);\n        this.buildTricksCards();\n      }\n    }\n    // Eventually error handle not enough gold\n    if (this.game.player.gold >= 2) {\n      let points = {\n        points: newCardButtonPoints\n      };\n      this.tracePath(points, this.gameCtx);\n      if (this.gameCtx.isPointInPath(mouseX, mouseY)) {\n        console.log(\"Clicked on Card Button\");\n        this.game.drawPlayer();\n        this.game.player.gold -= 2;\n        this.game.player.animate(this.gameCtx);\n        this.buildTricksCards();\n      }\n    }\n    // New Round button\n    //525,470,140,50\n    const newScoreRoundButton = [[500 / 1200 * this.canvasSize[0], 470 / 800 * this.canvasSize[1]], [140 * this.scaler, 50 * this.scaler]];\n    const newScoreRoundButtonPoints = Util.createPoints(newScoreRoundButton[0], newScoreRoundButton[1]);\n    let points = {\n      points: newScoreRoundButtonPoints\n    };\n    this.tracePath(points, this.gameCtx);\n    if (this.gameCtx.isPointInPath(mouseX, mouseY) && this.game.round <= Game.MAXROUNDS) {\n      // console.log(this.game.round,\"Round#\");\n      this.playRound();\n    }\n  }\n  moveCard(card, trick) {\n    let ownerid = card.trickid;\n    let owner;\n    this.allTricks.forEach(trick => {\n      if (trick.trickid === ownerid) {\n        owner = trick;\n        owner.removeCard(card);\n        owner.updateCards();\n        owner.evaluatePoker();\n      }\n    });\n    if (trick.addCard(card)) {\n      trick.updateCards();\n      trick.evaluatePoker();\n      this.cardSelected.selected = false;\n      this.cardSelected = false;\n    } else {\n      owner.addCard(card);\n      owner.updateCards();\n      owner.evaluatePoker();\n      this.cardSelected.selected = false;\n      this.cardSelected = false;\n    }\n  }\n  setupScreen() {\n    this.resetCardLinks();\n    this.gameCtx.clearRect(0, 0, this.canvasSize[0], this.canvasSize[1]);\n    this.game.animate(this.gameCtx);\n    this.game.dealer.animate(this.gameCtx);\n    this.game.player.animate(this.gameCtx);\n    this.animateScores();\n    this.buildTricksCards();\n  }\n  animateScores() {\n    this.calcScaler();\n    let scaler = this.scaler || 1;\n    this.gameCtx.font = `${40 * scaler}px Arial`;\n    this.gameCtx.fillStyle = \"#FFFFFF\";\n    this.gameCtx.clearRect(250 / 1200 * this.canvasSize[0], 0, 300, 150 / 800 * this.canvasSize[1]);\n    this.gameCtx.onload = () => {\n      this.calcScaler();\n      this.gameCtx.font = `${40}px Arial`;\n      this.gameCtx.clearRect(300 / 1200 * this.canvasSize[0], 0, 300, 150 / 800 * this.canvasSize[1]);\n      this.gameCtx.fillText(`Dealer Hands`, 300 / 1200 * this.canvasSize[0], 190 / 800 * this.canvasSize[1]);\n    };\n    this.gameCtx.fillText(`Dealer Hands`, 300 / 1200 * this.canvasSize[0], 190 / 800 * this.canvasSize[1]);\n\n    //Draw Score Button\n    this.gameCtx.font = `${24 * scaler}px Arial Bold`;\n    this.gameCtx.fillStyle = \"#003399\";\n    this.gameCtx.fillRect(525 / 1200 * this.canvasSize[0], 470 / 800 * this.canvasSize[1], 140 * scaler, 50 * scaler);\n    this.gameCtx.fillStyle = \"#FFFFFF\";\n    this.gameCtx.fillText(`Score Round`, 535 / 1200 * this.canvasSize[0], 500 / 800 * this.canvasSize[1]);\n    this.gameCtx.lineWidth = 3;\n    this.gameCtx.strokeStyle = \"#FFFFFF\";\n    this.gameCtx.strokeRect(525 / 1200 * this.canvasSize[0], 470 / 800 * this.canvasSize[1], 140 * scaler, 50 * scaler);\n    //Player Score \n    this.gameCtx.fillStyle = \"#003399\";\n    this.gameCtx.fillRect(285 / 1200 * this.canvasSize[0], 470 / 800 * this.canvasSize[1], 170 * scaler, 50 * scaler);\n    this.gameCtx.fillStyle = \"#FFFFFF\";\n    this.gameCtx.fillText(`Player Score: ${this.game.player.score}`, 295 / 1200 * this.canvasSize[0], 500 / 800 * this.canvasSize[1]);\n    this.gameCtx.lineWidth = 3;\n    this.gameCtx.strokeStyle = \"#FFFFFF\";\n    this.gameCtx.strokeRect(285 / 1200 * this.canvasSize[0], 470 / 800 * this.canvasSize[1], 170 * scaler, 50 * scaler);\n    //Dealer Score \n    this.gameCtx.fillStyle = \"#003399\";\n    this.gameCtx.fillRect(735 / 1200 * this.canvasSize[0], 470 / 800 * this.canvasSize[1], 170 * scaler, 50 * scaler);\n    this.gameCtx.fillStyle = \"#FFFFFF\";\n    this.gameCtx.fillText(`Dealer Score: ${this.game.dealer.score}`, 742 / 1200 * this.canvasSize[0], 500 / 800 * this.canvasSize[1]);\n    this.gameCtx.lineWidth = 3;\n    this.gameCtx.strokeStyle = \"#FFFFFF\";\n    this.gameCtx.strokeRect(735 / 1200 * this.canvasSize[0], 470 / 800 * this.canvasSize[1], 170 * scaler, 50 * scaler);\n  }\n  playRound() {\n    this.game.nextRound();\n    this.setupScreen();\n    this.buildTricksCards();\n    const roundscore = document.getElementById(\"roundscore\");\n    const overlay = document.getElementById(\"overlay\");\n    overlay.style.display = \"block\";\n    roundscore.style.display = \"flex\";\n  }\n}\nmodule.exports = ViewGame;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/game_files/view_game.js\n");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval("const Game = __webpack_require__(/*! ./game_files/game */ \"./src/game_files/game.js\");\nconst ViewGame = __webpack_require__(/*! ./game_files/view_game */ \"./src/game_files/view_game.js\");\n\n//Questions:\n// Ask about event handelers and what should own them\n// \n\nconst windowWidth = window.innerWidth;\nconst windowHeight = window.innerHeight;\nconsole.log(windowWidth, windowHeight, \"window X Y\");\n//Width,Height\n// 1400,1000 with 1200,800. so +\n// In essence, this is +- 25%\nconst canvasDimensions = [[900, 600], [1200, 800], [1500, 1000]];\nconst gameCanvas = document.getElementById(\"canvas\");\nconst gameCtx = gameCanvas.getContext(\"2d\");\nlet canvasSize = canvasDimensions[0];\nif (windowWidth > canvasDimensions[2][0] + 200 && windowHeight > canvasDimensions[2][1] + 200) {\n  canvasSize = canvasDimensions[2];\n} else if (windowWidth > canvasDimensions[1][0] + 200 && windowHeight > canvasDimensions[1][1] + 200) {\n  canvasSize = canvasDimensions[1];\n} else {\n  canvasSize = canvasDimensions[0];\n}\nconst roundScoreDimensions = [[920 * 0.75, 666 * 0.75], [920, 666], [920 * 1.25, 666 * 1.25]];\nconst roundScore = document.getElementById(\"roundscore\");\nlet roundScoreSize = roundScoreDimensions[1];\nif (windowWidth > canvasDimensions[2][0] + 200 && windowHeight > canvasDimensions[2][1] + 200) {\n  roundScoreSize = roundScoreDimensions[2];\n} else if (windowWidth > canvasDimensions[1][0] + 200 && windowHeight > canvasDimensions[1][1] + 200) {\n  roundScoreSize = roundScoreDimensions[1];\n} else {\n  roundScoreSize = roundScoreDimensions[0];\n}\nroundScore.setAttribute(\"width\", roundScoreSize[0]);\nroundScore.setAttribute(\"height\", roundScoreSize[1]);\nconsole.log(canvasSize, \"canvasSize\");\ngameCanvas.setAttribute(\"width\", canvasSize[0]);\ngameCanvas.setAttribute(\"height\", canvasSize[1]);\nconst game = new Game(canvasSize);\nconst gameCanvasRect = gameCanvas.getBoundingClientRect();\nconst gamepos = [gameCanvasRect.x, gameCanvasRect.y];\nconsole.log(gamepos, \"gamepos\");\nconst view = new ViewGame(game, gameCtx, gamepos, canvasSize);\nconst overlay = document.getElementById(\"overlay\");\nconst start = document.getElementById(\"start\");\nconst startbutton = document.getElementById(\"start-button\");\nconst roundscore = document.getElementById(\"roundscore\");\nconst continuebutton = document.getElementById(\"continuebutton\");\nstartbutton.addEventListener('click', () => {\n  overlay.style.display = \"none\";\n  start.style.display = \"none\";\n});\ncontinuebutton.addEventListener('click', () => {\n  overlay.style.display = \"none\";\n  roundscore.style.display = \"none\";\n  if (game.round < Game.MAXROUNDS) {\n    view.game.drawDealer();\n    view.setupScreen();\n  } else {\n    const playerscore = document.getElementById(\"finalplayerscore\");\n    const dealerscore = document.getElementById(\"finaldealerscore\");\n    const winner = document.getElementById(\"winner\");\n    const gameover = document.getElementById(\"gameover\");\n    const result = game.winner();\n    console.log([playerscore, dealerscore, winner], \"edits\");\n    playerscore.innerText = result[0];\n    dealerscore.innerText = result[1];\n    winner.innerText = result[2];\n    overlay.style.display = \"block\";\n    gameover.style.display = \"block\";\n  }\n});\nwindow.game = game;\nwindow.view = view;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TztFQUNwQztBQUdKLENBQUMsQ0FBQztBQUdGL0IsTUFBTSxDQUFDaUIsSUFBSSxHQUFHQSxJQUFJO0FBQ2xCakIsTUFBTSxDQUFDdUIsSUFBSSxHQUFHQSxJQUFJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2Fybml2YWxwb2tlci8uL3NyYy9pbmRleC5qcz9iNjM1Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEdhbWUgPSByZXF1aXJlKFwiLi9nYW1lX2ZpbGVzL2dhbWVcIilcclxuY29uc3QgVmlld0dhbWUgPSByZXF1aXJlKFwiLi9nYW1lX2ZpbGVzL3ZpZXdfZ2FtZVwiKVxyXG5cclxuLy9RdWVzdGlvbnM6XHJcbi8vIEFzayBhYm91dCBldmVudCBoYW5kZWxlcnMgYW5kIHdoYXQgc2hvdWxkIG93biB0aGVtXHJcbi8vIFxyXG5cclxuXHJcbmNvbnN0IHdpbmRvd1dpZHRoPSB3aW5kb3cuaW5uZXJXaWR0aDtcclxuY29uc3Qgd2luZG93SGVpZ2h0PSB3aW5kb3cuaW5uZXJIZWlnaHQ7XHJcbmNvbnNvbGUubG9nKHdpbmRvd1dpZHRoLHdpbmRvd0hlaWdodCxcIndpbmRvdyBYIFlcIilcclxuLy9XaWR0aCxIZWlnaHRcclxuLy8gMTQwMCwxMDAwIHdpdGggMTIwMCw4MDAuIHNvICtcclxuLy8gSW4gZXNzZW5jZSwgdGhpcyBpcyArLSAyNSVcclxuY29uc3QgY2FudmFzRGltZW5zaW9ucyA9IFtbOTAwLDYwMF0sWzEyMDAsODAwXSxbMTUwMCwxMDAwXV1cclxuY29uc3QgZ2FtZUNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpO1xyXG5jb25zdCBnYW1lQ3R4ID0gZ2FtZUNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XHJcbmxldCBjYW52YXNTaXplID0gY2FudmFzRGltZW5zaW9uc1swXTtcclxuXHJcbmlmKCh3aW5kb3dXaWR0aCk+KGNhbnZhc0RpbWVuc2lvbnNbMl1bMF0rMjAwKSAmJiAod2luZG93SGVpZ2h0KT4oY2FudmFzRGltZW5zaW9uc1syXVsxXSsyMDApKXtcclxuICAgIGNhbnZhc1NpemUgPSBjYW52YXNEaW1lbnNpb25zWzJdO1xyXG59IGVsc2UgaWYod2luZG93V2lkdGg+KGNhbnZhc0RpbWVuc2lvbnNbMV1bMF0rMjAwKSAmJiAod2luZG93SGVpZ2h0PihjYW52YXNEaW1lbnNpb25zWzFdWzFdKzIwMCkpKXtcclxuICAgIGNhbnZhc1NpemUgPSBjYW52YXNEaW1lbnNpb25zWzFdO1xyXG59ZWxzZSB7XHJcbiAgICBjYW52YXNTaXplID0gY2FudmFzRGltZW5zaW9uc1swXTtcclxufVxyXG5jb25zdCByb3VuZFNjb3JlRGltZW5zaW9ucyA9IFtbOTIwKjAuNzUsNjY2KjAuNzVdLFs5MjAsNjY2XSxbOTIwKjEuMjUsNjY2KjEuMjVdXVxyXG5jb25zdCByb3VuZFNjb3JlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyb3VuZHNjb3JlXCIpO1xyXG5sZXQgcm91bmRTY29yZVNpemUgPSByb3VuZFNjb3JlRGltZW5zaW9uc1sxXTsgXHJcblxyXG5pZigod2luZG93V2lkdGg+KGNhbnZhc0RpbWVuc2lvbnNbMl1bMF0rMjAwKSkgJiYgKHdpbmRvd0hlaWdodD4oY2FudmFzRGltZW5zaW9uc1syXVsxXSsyMDApKSl7XHJcbiAgICByb3VuZFNjb3JlU2l6ZSA9IHJvdW5kU2NvcmVEaW1lbnNpb25zWzJdO1xyXG59IGVsc2UgaWYoKHdpbmRvd1dpZHRoPihjYW52YXNEaW1lbnNpb25zWzFdWzBdKzIwMCkpICYmICh3aW5kb3dIZWlnaHQ+KGNhbnZhc0RpbWVuc2lvbnNbMV1bMV0rMjAwKSkpe1xyXG4gICAgcm91bmRTY29yZVNpemUgPSByb3VuZFNjb3JlRGltZW5zaW9uc1sxXTtcclxufWVsc2Uge1xyXG4gICAgcm91bmRTY29yZVNpemUgPSByb3VuZFNjb3JlRGltZW5zaW9uc1swXTtcclxufVxyXG5cclxucm91bmRTY29yZS5zZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiLHJvdW5kU2NvcmVTaXplWzBdKVxyXG5yb3VuZFNjb3JlLnNldEF0dHJpYnV0ZShcImhlaWdodFwiLHJvdW5kU2NvcmVTaXplWzFdKVxyXG5cclxuXHJcblxyXG5jb25zb2xlLmxvZyhjYW52YXNTaXplLFwiY2FudmFzU2l6ZVwiKVxyXG5nYW1lQ2FudmFzLnNldEF0dHJpYnV0ZShcIndpZHRoXCIsY2FudmFzU2l6ZVswXSlcclxuZ2FtZUNhbnZhcy5zZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIixjYW52YXNTaXplWzFdKVxyXG5jb25zdCBnYW1lID0gbmV3IEdhbWUgKGNhbnZhc1NpemUpO1xyXG5jb25zdCBnYW1lQ2FudmFzUmVjdCA9IGdhbWVDYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbmNvbnN0IGdhbWVwb3MgPSBbZ2FtZUNhbnZhc1JlY3QueCxnYW1lQ2FudmFzUmVjdC55XTtcclxuY29uc29sZS5sb2coZ2FtZXBvcyxcImdhbWVwb3NcIilcclxuY29uc3QgdmlldyA9IG5ldyBWaWV3R2FtZShnYW1lLGdhbWVDdHgsZ2FtZXBvcyxjYW52YXNTaXplKTtcclxuY29uc3Qgb3ZlcmxheSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwib3ZlcmxheVwiKTtcclxuY29uc3Qgc3RhcnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInN0YXJ0XCIpO1xyXG5jb25zdCBzdGFydGJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3RhcnQtYnV0dG9uXCIpO1xyXG5jb25zdCByb3VuZHNjb3JlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyb3VuZHNjb3JlXCIpO1xyXG5jb25zdCBjb250aW51ZWJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY29udGludWVidXR0b25cIik7XHJcblxyXG5zdGFydGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsKCk9PntcclxuICAgIG92ZXJsYXkuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgc3RhcnQuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG59KVxyXG5cclxuY29udGludWVidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCgpPT57XHJcbiAgICBvdmVybGF5LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgIHJvdW5kc2NvcmUuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgaWYoZ2FtZS5yb3VuZCA8IEdhbWUuTUFYUk9VTkRTKXtcclxuICAgICAgICB2aWV3LmdhbWUuZHJhd0RlYWxlcigpO1xyXG4gICAgICAgIHZpZXcuc2V0dXBTY3JlZW4oKTtcclxuICAgIH1lbHNle1xyXG4gICAgICAgIGNvbnN0IHBsYXllcnNjb3JlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmaW5hbHBsYXllcnNjb3JlXCIpXHJcbiAgICAgICAgY29uc3QgZGVhbGVyc2NvcmUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImZpbmFsZGVhbGVyc2NvcmVcIilcclxuICAgICAgICBjb25zdCB3aW5uZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIndpbm5lclwiKTtcclxuICAgICAgICBjb25zdCBnYW1lb3ZlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZ2FtZW92ZXJcIik7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gZ2FtZS53aW5uZXIoKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhbcGxheWVyc2NvcmUsZGVhbGVyc2NvcmUsd2lubmVyXSxcImVkaXRzXCIpXHJcbiAgICAgICAgcGxheWVyc2NvcmUuaW5uZXJUZXh0ID0gcmVzdWx0WzBdO1xyXG4gICAgICAgIGRlYWxlcnNjb3JlLmlubmVyVGV4dCA9IHJlc3VsdFsxXTtcclxuICAgICAgICB3aW5uZXIuaW5uZXJUZXh0ID0gcmVzdWx0WzJdO1xyXG4gICAgICAgIG92ZXJsYXkuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcclxuICAgICAgICBnYW1lb3Zlci5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgIFxyXG59KVxyXG5cclxuXHJcbndpbmRvdy5nYW1lID0gZ2FtZTtcclxud2luZG93LnZpZXcgPSB2aWV3O1xyXG4iXSwibmFtZXMiOlsiR2FtZSIsInJlcXVpcmUiLCJWaWV3R2FtZSIsIndpbmRvd1dpZHRoIiwid2luZG93IiwiaW5uZXJXaWR0aCIsIndpbmRvd0hlaWdodCIsImlubmVySGVpZ2h0IiwiY29uc29sZSIsImxvZyIsImNhbnZhc0RpbWVuc2lvbnMiLCJnYW1lQ2FudmFzIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImdhbWVDdHgiLCJnZXRDb250ZXh0IiwiY2FudmFzU2l6ZSIsInJvdW5kU2NvcmVEaW1lbnNpb25zIiwicm91bmRTY29yZSIsInJvdW5kU2NvcmVTaXplIiwic2V0QXR0cmlidXRlIiwiZ2FtZSIsImdhbWVDYW52YXNSZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiZ2FtZXBvcyIsIngiLCJ5IiwidmlldyIsIm92ZXJsYXkiLCJzdGFydCIsInN0YXJ0YnV0dG9uIiwicm91bmRzY29yZSIsImNvbnRpbnVlYnV0dG9uIiwiYWRkRXZlbnRMaXN0ZW5lciIsInN0eWxlIiwiZGlzcGxheSIsInJvdW5kIiwiTUFYUk9VTkRTIiwiZHJhd0RlYWxlciIsInNldHVwU2NyZWVuIiwicGxheWVyc2NvcmUiLCJkZWFsZXJzY29yZSIsIndpbm5lciIsImdhbWVvdmVyIiwicmVzdWx0IiwiaW5uZXJUZXh0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYXJuaXZhbHBva2VyLy4vc3JjL2luZGV4LnNjc3M/OTc0NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__("./src/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.scss");
/******/ 	
/******/ })()
;