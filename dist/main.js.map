{"version":3,"file":"main.js","mappings":"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","sources":["webpack://carnivalpoker/./src/game_files/card.js","webpack://carnivalpoker/./src/game_files/dealer.js","webpack://carnivalpoker/./src/game_files/deck.js","webpack://carnivalpoker/./src/game_files/game.js","webpack://carnivalpoker/./src/game_files/player.js","webpack://carnivalpoker/./src/game_files/trick.js","webpack://carnivalpoker/./src/game_files/util.js","webpack://carnivalpoker/./src/game_files/view_game.js","webpack://carnivalpoker/webpack/bootstrap","webpack://carnivalpoker/webpack/runtime/define property getters","webpack://carnivalpoker/webpack/runtime/hasOwnProperty shorthand","webpack://carnivalpoker/webpack/runtime/make namespace object","webpack://carnivalpoker/./src/index.js"],"sourcesContent":["class Card {\r\n    static CARDWIDTH = 55;\r\n    static CARDHEIGHT = 80;\r\n    constructor(object) {\r\n        \r\n        //#2-14\r\n        this.value = object.value;\r\n        // Suit needs to match the card save: Clubs, Diamond, Hearts, Spades\r\n        this.suit = object.suit;\r\n        // Code this in once ready to draw\r\n        this.sprite = new Image();\r\n        this.sprite.src = \"images/Cards/Medium/\"+this.suit+this.value+\".png\";\r\n        // console.log(this.sprite.src,\"Card Src\");\r\n        this.selected = false;\r\n        //Might need to know what trick we are inside, for event handling\r\n        this.trickid = 0;\r\n        this.pos = [0,0];\r\n        this.points =[];\r\n    }\r\n    animate(ctx,spot){\r\n        ctx.drawImage(this.sprite,spot[0],spot[1],Card.CARDWIDTH,Card.CARDHEIGHT)\r\n        if(this.selected){\r\n        ctx.lineWidth = 3;;\r\n        ctx.strokeStyle = \"#FFFF00\";\r\n        ctx.strokeRect(spot[0],spot[1],Card.CARDWIDTH,Card.CARDHEIGHT);\r\n        }\r\n        this.sprite.onload = ()=> {   \r\n            ctx.drawImage(this.sprite,spot[0],spot[1],Card.CARDWIDTH,Card.CARDHEIGHT);\r\n            if(this.selected){\r\n                ctx.lineWidth = 3;\r\n                ctx.strokeStyle = \"#FFFF00\";\r\n                ctx.strokeRect(spot[0],spot[1],Card.CARDWIDTH,Card.CARDHEIGHT);\r\n            }\r\n        };\r\n\r\n    }\r\n    updatePoints(pos){\r\n        this.pos = pos || this.pos;\r\n        this.points =[{\r\n            x: this.pos[0],\r\n            y: this.pos[1]\r\n        },{\r\n            x: this.pos[0]+Card.CARDWIDTH,\r\n            y: this.pos[1]\r\n        },{\r\n            x: this.pos[0]+Card.CARDWIDTH,\r\n            y: this.pos[1]+Card.CARDHEIGHT\r\n        },{\r\n            x: this.pos[0],\r\n            y: this.pos[1]+Card.CARDHEIGHT\r\n        }\r\n    ];\r\n    }\r\n}\r\n\r\nmodule.exports = Card; ","const Trick = require(\"./trick\")\r\nconst Player = require(\"./player\")\r\n\r\nclass Dealer extends Player{\r\n\r\n    constructor(object){\r\n        super(object);\r\n        this.dealerSet = [];\r\n        this.makeTricks();\r\n        this.makeDealerSet();\r\n    }\r\n    addCardBoard(card){\r\n        for(let i = 0;i <this.tricks.length;i++){\r\n            if(this.tricks[i].active && this.tricks[i].addCard(card)){\r\n                return true;\r\n            }else if(!this.tricks[i].active){\r\n                this.activateNextTrick();\r\n                this.addCardBoard(card);\r\n                break;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    makeTricks(){\r\n        let trickArray = [];\r\n        let trick1 = new Trick({pos: [this.pos[0],this.pos[1]+Trick.HEIGHT], trickid: 5, active: true});\r\n        trickArray.push(trick1);\r\n        let trick2 = new Trick({pos: [this.pos[0]+Trick.WIDTH,this.pos[1]+Trick.HEIGHT], color: \"#00CC33\", trickid: 6, active: true});\r\n        trickArray.push(trick2);\r\n        let trick3 = new Trick({pos: this.pos, color: \"#800080\", trickid: 7, active: true});\r\n        trickArray.push(trick3);\r\n        let trick4 = new Trick({pos: [this.pos[0]+Trick.WIDTH,this.pos[1]], color: \"#0099FF\", trickid: 8, active: true});\r\n        trickArray.push(trick4);\r\n        this.tricks = trickArray;\r\n    }\r\n\r\n\r\n\r\n    makeDealerSet (){\r\n        //This makes the dealer array\r\n        //This.tricks\r\n        //Dealer set is an array of tricks.\r\n\r\n        \r\n    }\r\n\r\n    newTrickSet (){\r\n        let trickArray = [];\r\n        let tempPos = this.pos;\r\n        let trick1 = new Trick({pos: this.pos, trickid: 1});\r\n        trickArray.push(trick1);\r\n        let trick2 = new Trick({pos: [this.pos[0]+400,this.pos[1]], color: \"#00FF00\", trickid: 2});\r\n        trickArray.push(trick2);\r\n        let trick3 = new Trick({pos: [this.pos[0],this.pos[1]+150], color: \"#FF0000\", trickid: 3});\r\n        trickArray.push(trick3);\r\n        let trick4 = new Trick({pos: [this.pos[0]+400,this.pos[1]+150], color: \"#0000FF\", trickid: 4});\r\n        trickArray.push(trick4);\r\n        return trickArray;\r\n    }\r\n\r\n\r\n    nextDealerCard(){\r\n\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Dealer;","const Card = require(\"./card\")\r\n\r\nclass Deck {\r\n\r\n        constructor(){\r\n            this.cards = [];\r\n            this.makeCards();\r\n        }\r\n\r\n    makeCards() {\r\n        let allCards = [];\r\n        let values = [2,3,4,5,6,7,8,9,10,11,12,13,14];\r\n        let suits = [\"Clubs\",\"Hearts\",\"Diamond\",\"Spades\"];\r\n        \r\n        for(let i = 0;i < values.length; i++){\r\n            for(let j = 0; j < suits.length; j++){\r\n                let cardObject = {\r\n                    suit: suits[j],\r\n                    value: values[i],\r\n                }\r\n                let card = new Card(cardObject);\r\n                allCards.push(card);\r\n            }\r\n        }\r\n        this.cards = allCards;\r\n        return true;\r\n    }\r\n\r\n    drawCard() {\r\n        const scaler = this.cards.length;\r\n        const random = Math.random();\r\n        const pick = Math.floor(scaler * random);\r\n        const chosen = this.cards[pick];\r\n        return this.cards.splice(this.cards.indexOf(chosen),1)[0];\r\n    }\r\n}\r\n\r\n// let deck = new Deck();\r\n// console.log(deck.cards.length);\r\n// console.log(deck.drawCard());\r\n// console.log(deck.cards.length);\r\nmodule.exports = Deck;","const Player = require(\"./player\")\r\nconst Deck = require(\"./deck\")\r\nconst Util = require(\"./util\")\r\nconst Dealer = require(\"./dealer\")\r\n\r\nclass Game {\r\n    static START_HAND = 7;\r\n    static MAXROUNDS = 10;\r\n    constructor(){\r\n        this.dealer = new Dealer({pos: [285,200], name: \"Dealer\", color:\"#FFA500\"})\r\n        this.player = new Player({pos: [285,560], name: \"Player\", color:\"#FFA500\"})\r\n        this.deck = new Deck();\r\n        this.round = 0;\r\n        this.prep_game();\r\n    }\r\n    prep_game(){\r\n        for(let i = 0; i < Game.START_HAND; i++){\r\n            this.drawPlayer();\r\n        }\r\n        for(let i = 0; i < Game.START_HAND; i++){\r\n            this.drawDealer();\r\n        }\r\n    }\r\n\r\n    drawPlayer(){\r\n        let new_card = this.deck.drawCard();\r\n        this.player.addCardBoard(new_card);     \r\n    }\r\n    drawDealer(){\r\n        let new_card = this.deck.drawCard();\r\n        this.dealer.addCardBoard(new_card);\r\n    }\r\n\r\n    nextRound(){\r\n        this.round += 1;\r\n        this.player.gold += 3;\r\n        this.compareBoards();\r\n        // console.log(this.player.score,\"player score\");\r\n        // console.log(this.dealer.score,\"dealer score\");\r\n    }\r\n\r\n    compareBoards(){\r\n        // Will need refactor to compare for each trick\r\n        // Loop based on whichever board has the most tricks\r\n        // Include auto win if mismatch on trick count\r\n\r\n        let dealer_scores = this.dealer.evaluateBoard();  \r\n        console.log(dealer_scores,\"Dealer Scores\")\r\n        let player_scores = this.player.evaluateBoard();\r\n        console.log(player_scores,\"Player Scores\")\r\n        let min = dealer_scores.length < player_scores.length ? dealer_scores.length : player_scores.length;\r\n        // console.log(min,\"min\");\r\n        let playerroundscore = 0;\r\n        let dealerroundscore = 0;\r\n        for(let i = 0;i<min;i++){\r\n            if(dealer_scores[i]>player_scores[i]){\r\n                let scoreobj = document.getElementById(`score${i+1}`)\r\n                scoreobj.innerText = 0;\r\n                dealerroundscore += 1;\r\n                console.log(\"Dealer Wins 1\")\r\n            }else if(dealer_scores[i]<player_scores[i]){\r\n                let scoreobj = document.getElementById(`score${i+1}`)\r\n                scoreobj.innerText = 1;\r\n                playerroundscore += 1;\r\n                console.log(\"Player Wins 1\")\r\n            }else if(dealer_scores[i] === player_scores[i]){\r\n                console.log(\"Tie\");\r\n            }\r\n        }\r\n        this.player.score += playerroundscore;\r\n        this.dealer.score += dealerroundscore;\r\n        console.log([this.player.score,this.dealer.score],\"Score after round\");\r\n        let playerscorehtml = document.getElementById(`playerscore`)\r\n        let dealerscorehtml = document.getElementById(`dealerscore`)\r\n        playerscorehtml.innerText = `Round Score     ${playerroundscore}`\r\n        dealerscorehtml.innerText = `Round Score     ${dealerroundscore}`\r\n    }\r\n\r\n    resetBoard(){\r\n\r\n    }\r\n\r\n}\r\n// const g = new Game();\r\n// g.play();\r\n\r\nmodule.exports = Game; ","const Trick = require(\"./trick\")\r\n\r\nclass Player{\r\n    static DIM_X = Trick.WIDTH*2;\r\n    static DIM_Y = Trick.HEIGHT*2;\r\n    constructor(object){\r\n  \r\n        this.pos = object.pos;\r\n        this.name = object.name;\r\n        this.score = 0;\r\n        this.gold = 0;\r\n        this.color = object.color;\r\n        //Probably want an array of trick pos.\r\n        //Probably want to prefill each board with 4 tricks, 3 of which are empty.\r\n        this.tricks = [];\r\n        this.makeTricks();\r\n    }\r\n\r\n\r\n    addCardBoard(card){\r\n        for(let i = 0;i <this.tricks.length;i++){\r\n            if(this.tricks[i].addCard(card)){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    activateNextTrick(){\r\n        for(let i = 0;i<this.tricks.length;i++){\r\n            let trick = this.tricks[i];\r\n            if(trick.active === false){\r\n                trick.active = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    makeTricks(){\r\n        let trickArray = [];\r\n        let tempPos = this.pos;\r\n        let trick1 = new Trick({pos: this.pos, trickid: 1, active: true});\r\n        trickArray.push(trick1);\r\n        let trick2 = new Trick({pos: [this.pos[0]+Trick.WIDTH,this.pos[1]], color: \"#00CC33\", trickid: 2, active: true});\r\n        trickArray.push(trick2);\r\n        let trick3 = new Trick({pos: [this.pos[0],this.pos[1]+Trick.HEIGHT], color: \"#800080\", trickid: 3, active: true});\r\n        trickArray.push(trick3);\r\n        let trick4 = new Trick({pos: [this.pos[0]+Trick.WIDTH,this.pos[1]+Trick.HEIGHT], color: \"#0099FF\", trickid: 4, active: true});\r\n        trickArray.push(trick4);\r\n        this.tricks = trickArray;\r\n    }\r\n    animate(ctx){\r\n        // ctx.clearRect(0,0,900,200)\r\n        ctx.fillStyle = this.color;\r\n        this.tricks.forEach((trick)=>{\r\n            trick.animate(ctx);\r\n        })\r\n        this.animateGold(ctx);\r\n    }\r\n\r\n    evaluateBoard(){\r\n        let scores = [];\r\n        for(let i = 0;i <this.tricks.length;i++){\r\n            let trick = this.tricks[i];\r\n            trick.evaluatePoker();\r\n            let value = trick.value || 0;\r\n            scores.push(value);\r\n        }\r\n        return scores;\r\n    }\r\n\r\n    animateGold(ctx){\r\n        // Might move this to the game class\r\n        if(this.name ===\"Player\"){\r\n        //Dealer Score \r\n        ctx.fillStyle = \"#003399\"\r\n        ctx.fillRect(980,370,130,260)\r\n        ctx.lineWidth = 3;\r\n        ctx.strokeStyle = \"#FFFFFF\";\r\n        ctx.strokeRect(980,370,130,260);    \r\n        ctx.font = \"30px Arial\";\r\n        ctx.fillStyle = \"#FFFFFF\"\r\n        ctx.fillText(`Gold: ${this.gold}`,995,400);\r\n        // Button for new card\r\n        const cardback = new Image();\r\n        cardback.src = \"images/Cards/Medium/BackRed1.png\"\r\n        ctx.drawImage(cardback,1020,405,55,80);\r\n        ctx.font = \"20px Arial\";\r\n        ctx.fillStyle = \"#FFFFFF\"\r\n        ctx.fillText(`New Card`,995,507);\r\n        ctx.fillText(`2`,1090,507);\r\n        /// Five in a row for the new hand\r\n        ctx.drawImage(cardback,995,515,55,80);\r\n        ctx.drawImage(cardback,1001,515,55,80);\r\n        ctx.drawImage(cardback,1007,515,55,80);\r\n        ctx.drawImage(cardback,1013,515,55,80);\r\n        ctx.drawImage(cardback,1019,515,55,80);\r\n        ctx.font = \"20px Arial\";\r\n        ctx.fillStyle = \"#FFFFFF\"\r\n        ctx.fillText(`New Trick`,995,620);\r\n        ctx.fillText(`6`,1092,620);\r\n        //This is a box 1020 to 1100 or 80 by 80\r\n        //The points are [1020,100],[1100,100],[1020,180],[1100,180]\r\n        cardback.onload = ()=> {\r\n            ctx.drawImage(cardback,1020,405,55,80);\r\n            ctx.drawImage(cardback,995,515,55,80);\r\n            ctx.drawImage(cardback,1001,515,55,80);\r\n            ctx.drawImage(cardback,1007,515,55,80);\r\n            ctx.drawImage(cardback,1013,515,55,80);\r\n            ctx.drawImage(cardback,1019,515,55,80);\r\n        }\r\n        \r\n        \r\n    }}\r\n}\r\n\r\nmodule.exports = Player;","const Player = require(\"./player\")\r\nconst Card = require(\"./card\")\r\nconst Util = require(\"./util\")\r\n\r\nclass Trick {\r\n    static WIDTH = 310;\r\n    static HEIGHT = 120;\r\n    static YBUFFER = 10;\r\n    static XBUFFER = 10;\r\n    static MAXCARDS = 5;\r\n    constructor(object){\r\n        this.pos = object.pos;\r\n        this.cards = [];\r\n        this.value = 0;\r\n        this.values = [];\r\n        this.trait = \"High Card\";\r\n        this.major = 0;\r\n        this.color = object.color;\r\n        this.trickid = object.trickid;\r\n        this.active = object.active;\r\n        this.points = [];\r\n        this.updatePoints();\r\n    }\r\n\r\n    updatePoints(pos){\r\n        this.pos = pos || this.pos;\r\n        this.points =[{\r\n            x: this.pos[0],\r\n            y: this.pos[1]\r\n        },{\r\n            x: this.pos[0]+Trick.WIDTH,\r\n            y: this.pos[1]\r\n        },{\r\n            x: this.pos[0]+Trick.WIDTH,\r\n            y: this.pos[1]+Trick.HEIGHT\r\n        },{\r\n            x: this.pos[0],\r\n            y: this.pos[1]+Trick.HEIGHT\r\n        }\r\n    ];\r\n    }\r\n\r\n    evaluate() {\r\n        let sum = 0;\r\n        this.cards.forEach((card)=>{\r\n            sum += card.value;\r\n        })\r\n        return sum; \r\n    }\r\n\r\n    evaluatePoker(){\r\n        let sorted = Util.sortCards(this.cards);\r\n        this.cards = sorted;\r\n        this.value = 0;\r\n        this.major = 0;\r\n        let values = [];\r\n        this.trait = \"High Card\";\r\n        let traitList = [\"High Card\",\"One Pair\",\"Two Pair\",\"Three of a Kind\",\r\n        \"Straight\",\"Flush\",\"Full House\",\"Four of a Kind\",\"Straight-Flush\"];\r\n        let suits = [\"Clubs\",\"Hearts\",\"Diamond\",\"Spades\"];\r\n        let base = 14;\r\n        for(let i = 0;i<this.cards.length;i++){\r\n            values.push(this.cards[i].value)\r\n        }\r\n        this.values = values;\r\n        if(this.cards.length === 5){\r\n            // Check flush\r\n            let flushCheck = false;\r\n            let straightCheck = true;\r\n            for(let i = 0;i<suits.length;i++){\r\n                let suit = suits[i];\r\n                if(this.cards.every((card)=>card.suit === suit)){\r\n                    flushCheck = true;\r\n                }\r\n            }\r\n            // Check straight\r\n            for(let i = 0;i<(values.length-1);i++){\r\n                if(values[i] !== values[i+1]+1){\r\n                    // console.log(values,\"straigh check\");\r\n                    // console.log([values[i],values[i+1]],\"straight check\");\r\n                    straightCheck = false;\r\n                }\r\n            }\r\n            if(flushCheck && straightCheck){\r\n                this.trait = \"Straight-Flush\";\r\n            }else if(flushCheck){\r\n                this.trait = \"Flush\"\r\n            }else if(straightCheck){\r\n                this.trait = \"Straight\"\r\n            }\r\n        }\r\n        let hash = {};\r\n        for(let i = 0;i<values.length;i++){\r\n            if(hash[values[i]] === undefined){\r\n                hash[values[i]] = 1;\r\n            }else{\r\n                hash[values[i]] += 1;\r\n            }\r\n        }\r\n        let pair = false;\r\n        let trips = false;\r\n        for(let i = 0;i<values.length;i++){\r\n             if(hash[values[i]]===4){\r\n                this.trait = \"Four of a Kind\";\r\n                this.major = values[i];\r\n             }\r\n             if(hash[values[i]]===2 && pair === false){\r\n                pair = true;\r\n                this.trait = \"One Pair\"\r\n                this.major = values[i];\r\n             }else if(hash[values[i]]===2 && pair === true && values[i] !== values[i-1]){\r\n                this.trait = \"Two Pair\"\r\n                this.major = values[i]>this.major ? values[i] : this.major;\r\n             }else if(hash[values[i]]===3){\r\n                trips = true;\r\n                this.trait = \"Three of a Kind\"\r\n                this.major = values[i];\r\n            }\r\n        }\r\n        if(trips && pair){\r\n            this.trait = \"Full House\"\r\n        }\r\n        this.major = this.major || values[0];\r\n        let rank = traitList.indexOf(this.trait)+1;\r\n        let tiebreaks = values.filter((num)=> num !== this.major);\r\n        let majorSum = this.major*(base**rank)*2;\r\n        let tiebreakSum = 0;\r\n        for(let i = 1;i<tiebreaks.length+1;i++){\r\n                tiebreakSum += tiebreaks[i-1]*(base**rank)/(base**i);\r\n        }\r\n        this.value = majorSum + tiebreakSum;\r\n        return this.value;\r\n    }\r\n\r\n    removeCard(card) {\r\n        let index = this.cards.indexOf(card);\r\n        return this.cards.splice(index,1)[0];\r\n    }\r\n\r\n    addCard(card){\r\n        // Need to refactor this to check if the trick has 5 cards\r\n        let count = this.cards.length;\r\n        if(count < Trick.MAXCARDS){\r\n            let pos = this.pos \r\n\r\n            pos = [pos[0]+Trick.XBUFFER,pos[1]+Trick.YBUFFER]\r\n            let xshift = count*Card.CARDWIDTH + count*3;\r\n            pos = [pos[0]+xshift,pos[1]];\r\n            card.pos = pos;\r\n            card.trickid = this.trickid;\r\n            card.updatePoints();\r\n            this.cards.push(card);\r\n            return true;\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n    updateCards(){\r\n        let count = this.cards.length;\r\n        for(let i = 0;i<count;i++){\r\n            let card = this.cards[i];\r\n            let pos = this.pos \r\n            pos = [pos[0]+Trick.XBUFFER,pos[1]+Trick.YBUFFER]\r\n            let xshift = i*Card.CARDWIDTH+i*3;\r\n            pos = [pos[0]+xshift,pos[1]];\r\n            card.pos = pos;\r\n            card.updatePoints();\r\n        }\r\n    }\r\n\r\n\r\n    animate(ctx){\r\n        if(this.active){\r\n        const trickobj = document.getElementById(`trick${this.trickid}`)\r\n        trickobj.style.display = \"flex\";\r\n        trickobj.style.backgroundColor = this.color;\r\n        let sorted = Util.sortCards(this.cards);\r\n        this.cards = sorted;\r\n        this.updateCards();\r\n        this.evaluatePoker();\r\n        ctx.fillStyle = this.active ? this.color : \"#000000\";\r\n        let trickX = this.pos[0];\r\n        let trickY = this.pos[1];\r\n        ctx.fillRect(trickX,trickY,Trick.WIDTH,Trick.HEIGHT)\r\n        ctx.fillStyle = \"#FFFFFF\"\r\n        ctx.font = \"20px Arial\";\r\n        //${this.values} ${this.value} \r\n        ctx.fillText(`${this.trait}`,trickX+115,trickY+115)\r\n        for(let i = 0;i<this.cards.length;i++){\r\n            let currentCard = this.cards[i];\r\n            currentCard.animate(ctx,currentCard.pos);\r\n            let cardobj = document.getElementById(`${this.trickid}-${i}`)\r\n            cardobj.src = currentCard.sprite.src\r\n        }\r\n        ctx.lineWidth = 3;\r\n        ctx.strokeStyle = \"#FFFFFF\";\r\n        ctx.strokeRect(this.pos[0],this.pos[1],Trick.WIDTH,Trick.HEIGHT);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// let t = new Trick({pos: [0,0]});\r\n// t.addCard(\"A\");\r\n// console.log(t,\"t\");\r\n\r\n\r\nmodule.exports = Trick; ","\r\nexport function sortCards(array){\r\n        function sorter(card1,card2){\r\n            //Return 1 if card 1 > card 2\r\n            //Return -1 if card 1 < card 2\r\n            const suits = [\"Spades\",\"Hearts\",\"Diamond\",\"Clubs\"]\r\n            if(card1.value>card2.value){\r\n                return 1\r\n            }else if(card1.value<card2.value){\r\n                return -1 \r\n            }else{\r\n                if(suits.indexOf(card1.suit)<suits.indexOf(card2.suit)){\r\n                    return 1\r\n                }else{\r\n                    return -1 \r\n                }\r\n            }\r\n        }\r\n        let pivot = array[0];\r\n        if(array.length < 2) return array;\r\n        let left = array.slice(1).filter((ele) => sorter(pivot,ele) === -1);\r\n        let right = array.slice(1).filter((ele) => sorter(pivot,ele) === 1);\r\n        let leftSorted = sortCards(left);\r\n        let rightSorted = sortCards(right);\r\n        return leftSorted.concat([pivot]).concat(rightSorted);\r\n    }\r\nexport function createPoints(pos,box){\r\n        const points =[{\r\n            x: pos[0],\r\n            y: pos[1]\r\n        },{\r\n            x: pos[0]+box[0],\r\n            y: pos[1]\r\n        },{\r\n            x: pos[0]+box[0],\r\n            y: pos[1]+box[1]\r\n        },{\r\n            x: pos[0],\r\n            y: pos[1]+box[1]\r\n        }\r\n    ];\r\n    return points;\r\n    }","const Util = require(\"./util\")\r\n\r\nclass ViewGame {\r\n\r\n    constructor(game,ctx,pos){\r\n        this.game = game;\r\n        this.gameCtx = ctx;\r\n        this.allCards = [];\r\n        this.allTricks = [];\r\n        this.setupScreen();\r\n        this.buildTricksCards();\r\n        this.bindCanvas();\r\n        this.cardSelected = false;\r\n        this.pos = pos;\r\n    }\r\n\r\n    resetCardLinks(){\r\n        let tricksidx = [1,2,3,4,5,6,7,8]\r\n        let cardsidx = [0,1,2,3,4]\r\n\r\n        for(let i = 1;i<tricksidx.length;i++){\r\n            for(let j = 0;j<cardsidx.length;j++){\r\n                let cardobj = document.getElementById(`${i}-${j}`);\r\n                cardobj.src = \"./images/transparent.png\";\r\n            }\r\n        }\r\n    }\r\n\r\n    buildTricksCards(){\r\n        // 2D array, first item is the shape array. second item is the card.\r\n        // Loop through player tricks and build each card. \r\n        let tricks = this.game.player.tricks;\r\n        let allCards = [];\r\n        let allTricks = [];\r\n        // console.log(tricks,\"player tricks\");\r\n        for(let i = 0;i < tricks.length;i++){\r\n            let trick = tricks[i];\r\n            allTricks.push(trick);\r\n            // console.log(trick,\"a grabbed trick\");\r\n            for(let j = 0; j < trick.cards.length ; j++){\r\n                let card = trick.cards[j];\r\n                // console.log(card,\"a grabbed card\");\r\n                allCards.push(card);\r\n            }\r\n        }\r\n        this.allCards = allCards;\r\n        this.allTricks = allTricks;\r\n    }\r\n    \r\n    tracePath(object,ctx){\r\n        let points = object.points;\r\n        ctx.beginPath();\r\n        ctx.moveTo(points[0].x,points[0].y);\r\n        for(let i = 1; i < points.length; i++) {\r\n            ctx.lineTo(points[i].x,points[i].y);\r\n        }\r\n    }\r\n\r\n    bindCanvas(){\r\n        let canvas = document.getElementById(\"game\");\r\n        // console.log(canvas,\"canvasgrabbed\");\r\n        canvas.addEventListener('click',this.handleCanvasClick.bind(this))\r\n    }\r\n    // bindDealer(){\r\n    //     let canvas = document.getElementById(\"game\");\r\n    //     // console.log(canvas,\"canvasgrabbed\");\r\n    //     canvas.addEventListener('click',this.handleDealerCanvasClick.bind(this))\r\n    // }\r\n    // handleDealerCanvasClick(e) {\r\n    //     e.preventDefault();\r\n    //     console.log(\"Click detected\")\r\n     \r\n    //     let xOffset = this.pos[0];\r\n    //     let yOffset = this.pos[1];\r\n    //     let mouseX = parseInt(e.clientX - xOffset);\r\n    //     let mouseY = parseInt(e.clientY - yOffset);\r\n    //     console.log([e.clientX,e.clientY],\"Event Mouse Click Array\")\r\n    //     console.log([mouseX,mouseY],\"Mouse Click Pos After Offsets\")\r\n    //     const newScoreRoundButton = [[1000,345],[160,80]];\r\n    //     const newScoreRoundButtonPoints = Util.createPoints(newScoreRoundButton[0],newScoreRoundButton[1]);\r\n    //     let points = {points: newScoreRoundButtonPoints}\r\n    //     this.tracePath(points,this.gameCtx)\r\n    //     if(this.gameCtx.isPointInPath(mouseX,mouseY)){\r\n    //         console.log(\"Click on Score Round\");\r\n    //         this.playRound();\r\n    //     }\r\n\r\n    // }\r\n\r\n    handleCanvasClick(e) {\r\n        e.preventDefault();\r\n        console.log(\"Click detected\")\r\n        // console.log(this.cardSelected,\"Card Selected?\")\r\n        let xOffset = this.pos[0];\r\n        let yOffset = this.pos[1];\r\n        let mouseX = parseInt(e.clientX - xOffset);\r\n        let mouseY = parseInt(e.clientY - yOffset);\r\n        console.log([e.clientX,e.clientY],\"Event Mouse Click Array\")\r\n        console.log([mouseX,mouseY],\"Mouse Click Pos After Offsets\")\r\n        // console.log([this.allCards.length],\"Card Array Length\");\r\n        // console.log([this.allTricks.length],\"Trick Array Length\");\r\n        // see if a card has been clicked on\r\n        if(this.cardSelected === false){\r\n            for(let i =0; i< this.allCards.length;i++){\r\n                let card = this.allCards[i];\r\n                // console.log(card.pos,\"Card Pos\");\r\n                this.tracePath(card,this.gameCtx);\r\n                if (this.gameCtx.isPointInPath(mouseX,mouseY)){\r\n                    this.cardSelected = card;\r\n                    card.selected = true;\r\n                    console.log(card,\"grabbed card\");\r\n                    this.game.player.animate(this.gameCtx);\r\n                    this.buildTricksCards();\r\n                    break;\r\n                    \r\n                }\r\n            }\r\n        }\r\n        else if(this.cardSelected){\r\n            for(let i = 0; i < this.allTricks.length;i++){\r\n                let trick = this.allTricks[i];\r\n                // console.log(trick.pos,\"Trick Pos\");\r\n                this.tracePath(trick,this.gameCtx);\r\n                if (this.gameCtx.isPointInPath(mouseX,mouseY)){\r\n                    console.log(trick,\"grabbed trick\");\r\n                    this.moveCard(this.cardSelected,trick);\r\n                    this.game.player.animate(this.gameCtx);\r\n                    this.buildTricksCards();\r\n                }\r\n            }\r\n        }\r\n        const newTrickButton = [[995,515],[80,80]];\r\n        const newCardButton = [[1020,405],[55,80]];\r\n        const newTrickButtonPoints = Util.createPoints(newTrickButton[0],newTrickButton[1]);\r\n        const newCardButtonPoints = Util.createPoints(newCardButton[0],newCardButton[1]);\r\n        // Eventually need to error handle if there isnt enough gold\r\n        if(this.game.player.gold >= 6){\r\n            let points = {points: newTrickButtonPoints}\r\n            this.tracePath(points,this.gameCtx)\r\n            if(this.gameCtx.isPointInPath(mouseX,mouseY)){\r\n                console.log(\"Clicked on Trick Button\");\r\n                this.game.player.activateNextTrick();\r\n                this.game.player.gold -= 6;\r\n                this.game.player.animate(this.gameCtx);\r\n                this.buildTricksCards();\r\n            }\r\n        }\r\n        // Eventually error handle not enough gold\r\n        if(this.game.player.gold >= 2){\r\n            let points = {points: newCardButtonPoints}\r\n            this.tracePath(points,this.gameCtx)\r\n            if(this.gameCtx.isPointInPath(mouseX,mouseY)){\r\n                console.log(\"Clicked on Card Button\");\r\n                this.game.drawPlayer();\r\n                this.game.player.gold -= 2;\r\n                this.game.player.animate(this.gameCtx);\r\n                this.buildTricksCards();\r\n            }\r\n        }\r\n        // New Round button\r\n        //525,470,140,50\r\n        const newScoreRoundButton = [[525,470],[140,50]];\r\n        const newScoreRoundButtonPoints = Util.createPoints(newScoreRoundButton[0],newScoreRoundButton[1]);\r\n        let points = {points: newScoreRoundButtonPoints}\r\n        this.tracePath(points,this.gameCtx)\r\n        if(this.gameCtx.isPointInPath(mouseX,mouseY)){\r\n            console.log(\"Click on Score Round\");\r\n            this.playRound();\r\n        }\r\n\r\n        \r\n\r\n    }\r\n\r\n    moveCard(card,trick){\r\n        let ownerid = card.trickid;\r\n        let owner;\r\n        this.allTricks.forEach((trick) =>{\r\n            if(trick.trickid === ownerid){\r\n                owner = trick;\r\n                owner.removeCard(card);\r\n                owner.updateCards();\r\n                owner.evaluatePoker();\r\n            }\r\n        })\r\n        if(trick.addCard(card)){\r\n        trick.updateCards();\r\n        trick.evaluatePoker();\r\n        this.cardSelected.selected = false;\r\n        this.cardSelected = false;\r\n        }else{\r\n            owner.addCard(card)\r\n            owner.updateCards();\r\n            owner.evaluatePoker();\r\n            this.cardSelected.selected = false;\r\n            this.cardSelected = false;\r\n        }\r\n    }\r\n\r\n\r\n    setupScreen(){\r\n        this.resetCardLinks();\r\n        this.gameCtx.clearRect(0,0,1200,900)\r\n        this.game.dealer.animate(this.gameCtx);\r\n        this.game.player.animate(this.gameCtx);\r\n        this.animateScores();\r\n        this.buildTricksCards();\r\n    }\r\n\r\n    animateScores(){\r\n        this.gameCtx.font = \"40px Arial\";\r\n        this.gameCtx.fillStyle = \"#FFFFFF\";\r\n        this.gameCtx.clearRect(350,0,300,198)\r\n        this.gameCtx.onload = ()=> {\r\n        this.gameCtx.clearRect(350,195,100,50)\r\n        this.gameCtx.fillText(`Dealer Hands`,350,195);\r\n        }\r\n        this.gameCtx.fillText(`Dealer Hands`,350,195);\r\n\r\n        //Draw Score Button\r\n        this.gameCtx.font = \"24px Arial Bold\";\r\n        this.gameCtx.fillStyle = \"#003399\"\r\n        this.gameCtx.fillRect(525,470,140,50)\r\n        this.gameCtx.fillStyle = \"#FFFFFF\";\r\n        this.gameCtx.fillText(`Score Round`,532,500);\r\n        this.gameCtx.lineWidth = 3;\r\n        this.gameCtx.strokeStyle = \"#FFFFFF\";\r\n        this.gameCtx.strokeRect(525,470,140,50);\r\n        //Player Score \r\n        this.gameCtx.fillStyle = \"#003399\"\r\n        this.gameCtx.fillRect(285,470,170,50)\r\n        this.gameCtx.fillStyle = \"#FFFFFF\";\r\n        this.gameCtx.fillText(`Player Score: ${this.game.player.score}`,292,500);\r\n        this.gameCtx.lineWidth = 3;\r\n        this.gameCtx.strokeStyle = \"#FFFFFF\";\r\n        this.gameCtx.strokeRect(285,470,170,50);\r\n        //Dealer Score \r\n        this.gameCtx.fillStyle = \"#003399\"\r\n        this.gameCtx.fillRect(746,470,170,50)\r\n        this.gameCtx.fillStyle = \"#FFFFFF\";\r\n        this.gameCtx.fillText(`Dealer Score: ${this.game.dealer.score}`,752,500);\r\n        this.gameCtx.lineWidth = 3;\r\n        this.gameCtx.strokeStyle = \"#FFFFFF\";\r\n        this.gameCtx.strokeRect(746,470,170,50);\r\n\r\n    }\r\n\r\n    playRound(){\r\n        this.game.nextRound();\r\n        this.setupScreen();\r\n        this.buildTricksCards();\r\n        const roundscore = document.getElementById(\"roundscore\");\r\n        const overlay = document.getElementById(\"overlay\");\r\n        overlay.style.display = \"block\";\r\n        roundscore.style.display = \"flex\";\r\n    }\r\n\r\n\r\n}\r\n\r\nmodule.exports = ViewGame;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const Game = require(\"./game_files/game\")\r\nconst ViewGame = require(\"./game_files/view_game\")\r\n\r\n//Questions:\r\n// Ask about event handelers and what should own them\r\n// \r\n\r\nconst gameCanvas = document.getElementById(\"canvas\");\r\nconst gameCtx = gameCanvas.getContext(\"2d\");\r\nconst game = new Game ();\r\nconst gameCanvasRect = gameCanvas.getBoundingClientRect();\r\nconst gamepos = [gameCanvasRect.x,gameCanvasRect.y];\r\nconst view = new ViewGame(game,gameCtx,gamepos);\r\nconst overlay = document.getElementById(\"overlay\");\r\nconst start = document.getElementById(\"start\");\r\nconst startbutton = document.getElementById(\"start-button\");\r\nconst roundscore = document.getElementById(\"roundscore\");\r\nconst continuebutton = document.getElementById(\"continuebutton\");\r\n\r\nstartbutton.addEventListener('click',()=>{\r\n    overlay.style.display = \"none\";\r\n    start.style.display = \"none\";\r\n})\r\n\r\ncontinuebutton.addEventListener('click',()=>{\r\n    overlay.style.display = \"none\";\r\n    roundscore.style.display = \"none\";\r\n    view.game.drawDealer();\r\n    view.setupScreen();\r\n})\r\n\r\n\r\nwindow.game = game;\r\nwindow.view = view;\r\n"],"names":["Card","constructor","object","this","value","suit","sprite","Image","src","selected","trickid","pos","points","animate","ctx","spot","drawImage","CARDWIDTH","CARDHEIGHT","lineWidth","strokeStyle","strokeRect","onload","updatePoints","x","y","_defineProperty","module","exports","Trick","require","Player","super","dealerSet","makeTricks","makeDealerSet","addCardBoard","card","i","tricks","length","active","addCard","activateNextTrick","trickArray","trick1","HEIGHT","push","trick2","WIDTH","color","trick3","trick4","newTrickSet","nextDealerCard","cards","makeCards","allCards","values","suits","j","drawCard","scaler","random","Math","pick","floor","chosen","splice","indexOf","Deck","Dealer","Game","dealer","name","player","deck","round","prep_game","START_HAND","drawPlayer","drawDealer","new_card","nextRound","gold","compareBoards","dealer_scores","evaluateBoard","console","log","player_scores","min","playerroundscore","dealerroundscore","document","getElementById","innerText","score","playerscorehtml","dealerscorehtml","resetBoard","trick","fillStyle","forEach","animateGold","scores","evaluatePoker","fillRect","font","fillText","cardback","Util","trait","major","evaluate","sum","sorted","sortCards","flushCheck","straightCheck","every","hash","undefined","pair","trips","rank","tiebreaks","filter","num","majorSum","tiebreakSum","removeCard","index","count","MAXCARDS","XBUFFER","YBUFFER","xshift","updateCards","trickobj","style","display","backgroundColor","trickX","trickY","currentCard","array","sorter","card1","card2","pivot","left","slice","ele","right","leftSorted","rightSorted","concat","createPoints","box","game","gameCtx","allTricks","setupScreen","buildTricksCards","bindCanvas","cardSelected","resetCardLinks","tricksidx","cardsidx","tracePath","beginPath","moveTo","lineTo","addEventListener","handleCanvasClick","bind","e","preventDefault","xOffset","yOffset","mouseX","parseInt","clientX","mouseY","clientY","isPointInPath","moveCard","newTrickButton","newCardButton","newTrickButtonPoints","newCardButtonPoints","newScoreRoundButton","playRound","owner","ownerid","clearRect","animateScores","roundscore","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","ViewGame","gameCanvas","getContext","gameCanvasRect","getBoundingClientRect","view","overlay","start","startbutton","continuebutton","window"],"sourceRoot":""}